"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const botbuilder_core_1 = require("botbuilder-core");
/**
 * Provides methods to create activities containing hero cards for showing active learning or multi-turn prompt options for the QnAMakerDialog.
 */
class QnACardBuilder {
    /**
     * Returns an activity with a hero card attachment, containing buttons for active learning suggestions.
     * @param suggestionsList List of suggestions to be displayed on hero card.
     * @param cardTitle Title of the hero card.
     * @param cardNoMatchText Text for button to be added to card to allow user to select 'no match'.
     */
    static getSuggestionsCard(suggestionsList, cardTitle, cardNoMatchText) {
        if (!Array.isArray(suggestionsList)) {
            throw new Error('Missing suggestionsList');
        }
        if (!cardTitle) {
            throw new Error('Missing cardTitle');
        }
        if (!cardNoMatchText) {
            throw new Error('Missing cardNoMatchText');
        }
        const buttonList = [];
        suggestionsList.forEach((suggestion) => {
            buttonList.push({
                value: suggestion,
                type: 'imBack',
                title: suggestion,
            });
        });
        buttonList.push({
            value: cardNoMatchText,
            type: 'imBack',
            title: cardNoMatchText,
        });
        const promptsCard = botbuilder_core_1.CardFactory.heroCard('', undefined, buttonList);
        const message = botbuilder_core_1.MessageFactory.attachment(promptsCard, cardTitle);
        return message;
    }
    /**
     * Returns an activity with answer text and a hero card attachment, containing buttons for multi turn prompts.
     * @param result QnAMaker result containing the answer text and multi turn prompts to be displayed.
     */
    static getQnAPromptsCard(result) {
        if (!result) {
            throw new Error('Missing QnAMaker result');
        }
        const buttonList = [];
        result.context.prompts.forEach((prompt) => {
            buttonList.push({
                value: prompt.displayText,
                type: 'imBack',
                title: prompt.displayText,
            });
        });
        const promptsCard = botbuilder_core_1.CardFactory.heroCard('', undefined, buttonList);
        const message = botbuilder_core_1.MessageFactory.attachment(promptsCard, result.answer);
        return message;
    }
}
exports.QnACardBuilder = QnACardBuilder;
//# sourceMappingURL=qnaCardBuilder.js.map