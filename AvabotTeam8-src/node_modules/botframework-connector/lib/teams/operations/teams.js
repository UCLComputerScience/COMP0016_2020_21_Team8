"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
// This code has been manually edited to reflect the integration of the Teams schemas into botframework-schema
// and the botframework-connector libraries.
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/teamsMappers");
const Parameters = require("../models/parameters");
/** Class representing a Teams. */
class Teams {
    /**
     * Create a Teams.
     * @param {TeamsConnectorClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches channel list for a given team.
     * @param teamId Team Id.
     * @param options Optional. The options object to be used in every request.
     * @param callback The callback.
     * @returns A `Promise<Models.TeamsFetchChannelListResponse>`.
     */
    fetchChannelList(teamId, options, callback) {
        return this.client.sendOperationRequest({
            teamId,
            options,
        }, fetchChannelListOperationSpec, callback);
    }
    /**
     * Fetches details related to a team.
     * @param teamId Team Id.
     * @param options Optional. The options object to be used in every request.
     * @param callback The callback.
     * @returns A `Promise<Models.TeamsFetchTeamDetailsResponse>`.
     */
    fetchTeamDetails(teamId, options, callback) {
        return this.client.sendOperationRequest({
            teamId,
            options,
        }, fetchTeamDetailsOperationSpec, callback);
    }
    fetchMeetingParticipant(meetingId, participantId, options, callback) {
        return this.client.sendOperationRequest({
            meetingId,
            participantId,
            options,
        }, fetchMeetingParticipantOperationSpec, callback);
    }
}
exports.Teams = Teams;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const fetchChannelListOperationSpec = {
    httpMethod: 'GET',
    path: 'v3/teams/{teamId}/conversations',
    urlParameters: [Parameters.teamId],
    responses: {
        200: {
            bodyMapper: Mappers.ConversationList,
        },
        default: {},
    },
    serializer,
};
const fetchTeamDetailsOperationSpec = {
    httpMethod: 'GET',
    path: 'v3/teams/{teamId}',
    urlParameters: [Parameters.teamId],
    responses: {
        200: {
            bodyMapper: Mappers.TeamDetails,
        },
        default: {},
    },
    serializer,
};
const fetchMeetingParticipantOperationSpec = {
    httpMethod: 'GET',
    path: 'v1/meetings/{meetingId}/participants/{participantId}',
    urlParameters: [Parameters.meetingId, Parameters.participantId],
    queryParameters: [Parameters.tenantId],
    responses: {
        200: {
            bodyMapper: Mappers.TeamsMeetingParticipant,
        },
        default: {},
    },
    serializer,
};
//# sourceMappingURL=teams.js.map