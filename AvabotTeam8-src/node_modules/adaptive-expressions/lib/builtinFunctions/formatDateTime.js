"use strict";
/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
const expressionEvaluator_1 = require("../expressionEvaluator");
const expressionType_1 = require("../expressionType");
const functionUtils_1 = require("../functionUtils");
const functionUtils_internal_1 = require("../functionUtils.internal");
const returnType_1 = require("../returnType");
/**
 * Return a timestamp in the specified format.
 * Format reference: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
 */
class FormatDateTime extends expressionEvaluator_1.ExpressionEvaluator {
    /**
     * Initializes a new instance of the [FormatDateTime](xref:adaptive-expressions.FormatDateTime) class.
     */
    constructor() {
        super(expressionType_1.ExpressionType.FormatDateTime, FormatDateTime.evaluator(), returnType_1.ReturnType.String, FormatDateTime.validator);
    }
    /**
     * @private
     */
    static evaluator() {
        return functionUtils_1.FunctionUtils.applyWithError((args) => {
            let error;
            let arg = args[0];
            if (typeof arg === 'string') {
                error = functionUtils_internal_1.InternalFunctionUtils.verifyTimestamp(arg.toString());
            }
            else {
                arg = arg.toString();
            }
            let value;
            if (!error) {
                const dateString = new Date(arg).toISOString();
                value =
                    args.length === 2
                        ? moment_1.default(dateString).format(functionUtils_1.FunctionUtils.timestampFormatter(args[1]))
                        : dateString;
            }
            return { value, error };
        });
    }
    /**
     * @private
     */
    static validator(expression) {
        functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String);
    }
}
exports.FormatDateTime = FormatDateTime;
//# sourceMappingURL=formatDateTime.js.map