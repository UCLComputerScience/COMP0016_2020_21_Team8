import * as msRest from '@azure/ms-rest-js';
import * as Models from '../models';
import { TeamsConnectorClientContext } from '../';
import { ConversationList, TeamDetails, TeamsMeetingParticipant } from 'botframework-schema';
/** Class representing a Teams. */
export declare class Teams {
    private readonly client;
    /**
     * Create a Teams.
     * @param {TeamsConnectorClientContext} client Reference to the service client.
     */
    constructor(client: TeamsConnectorClientContext);
    /**
     * Fetches channel list for a given team.
     * @param teamId Team Id.
     * @param options Optional. The options object to be used in every request.
     * @returns A `Promise<Models.TeamsFetchChannelListResponse>`.
     */
    fetchChannelList(teamId: string, options?: msRest.RequestOptionsBase): Promise<Models.TeamsFetchChannelListResponse>;
    /**
     * Fetches channel list for a given team.
     * @param teamId Team Id.
     * @param callback The callback.
     */
    fetchChannelList(teamId: string, callback: msRest.ServiceCallback<ConversationList>): void;
    /**
     * Fetches channel list for a given team.
     * @param teamId Team Id.
     * @param options The options object to be used in every request.
     * @param callback The callback.
     */
    fetchChannelList(teamId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<ConversationList>): void;
    /**
     * Fetches details related to a team.
     * @param teamId Team Id.
     * @param options Optional. The options object to be used in every request.
     * @returns A `Promise<Models.TeamsFetchTeamDetailsResponse>`.
     */
    fetchTeamDetails(teamId: string, options?: msRest.RequestOptionsBase): Promise<Models.TeamsFetchTeamDetailsResponse>;
    /**
     * Fetches details related to a team.
     * @param teamId Team Id.
     * @param callback The callback.
     */
    fetchTeamDetails(teamId: string, callback: msRest.ServiceCallback<TeamDetails>): void;
    /**
     * Fetches details related to a team.
     * @param teamId Team Id.
     * @param options The options object to be used in every request.
     * @param callback The callback.
     */
    fetchTeamDetails(teamId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<TeamDetails>): void;
    /**
     * Fetch a meeting participant
     * @summary Fetches a meeting participant
     * @param meetingId Meeting Id
     * @param participantId Participant Id
     * @param [options] The optional parameters
     * @returns Promise<Models.TeamsFetchMeetingParticipantResponse>
     */
    fetchMeetingParticipant(meetingId: string, participantId: string, options?: Models.TeamsFetchMeetingParticipantOptionalParams): Promise<Models.TeamsFetchMeetingParticipantResponse>;
    /**
     * @param meetingId Meeting Id
     * @param participantId Participant Id
     * @param callback The callback
     */
    fetchMeetingParticipant(meetingId: string, participantId: string, callback: msRest.ServiceCallback<TeamsMeetingParticipant>): void;
    /**
     * @param meetingId Meeting Id
     * @param participantId Participant Id
     * @param options The optional parameters
     * @param callback The callback
     */
    fetchMeetingParticipant(meetingId: string, participantId: string, options: Models.TeamsFetchMeetingParticipantOptionalParams, callback: msRest.ServiceCallback<TeamsMeetingParticipant>): void;
}
//# sourceMappingURL=teams.d.ts.map