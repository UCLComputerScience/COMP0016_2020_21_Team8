"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cognitiveservices_luis_runtime_1 = require("@azure/cognitiveservices-luis-runtime");
const msRest = require("@azure/ms-rest-js");
const luisRecognizerOptions_1 = require("./luisRecognizerOptions");
const botbuilder_core_1 = require("botbuilder-core");
const os = require("os");
const pjson = require('../package.json');
const LUIS_TRACE_TYPE = 'https://www.luis.ai/schemas/trace';
const LUIS_TRACE_NAME = 'LuisRecognizer';
const LUIS_TRACE_LABEL = 'Luis Trace';
/**
 * Validates if the options provided are valid [LuisRecognizerOptionsV2](xref:botbuilder-ai.LuisRecognizerOptionsV2).
 * @returns A boolean value that indicates param options is a [LuisRecognizerOptionsV2](xref:botbuilder-ai.LuisRecognizerOptionsV2).
 */
function isLuisRecognizerOptionsV2(options) {
    return options.apiVersion && options.apiVersion === 'v2';
}
exports.isLuisRecognizerOptionsV2 = isLuisRecognizerOptionsV2;
/**
 * Recognize intents in a user utterance using a configured LUIS model.
 */
class LuisRecognizerV2 extends luisRecognizerOptions_1.LuisRecognizerInternal {
    /**
     * Creates a new [LuisRecognizerV2](xref:botbuilder-ai.LuisRecognizerV2) instance.
     * @param application An object conforming to the [LuisApplication](xref:botbuilder-ai.LuisApplication) definition or a string representing a LUIS application endpoint, usually retrieved from https://luis.ai.
     * @param options Optional. Options object used to control predictions. Should conform to the [LuisRecognizerOptionsV2](xref:botbuilder-ai.LuisRecognizerOptionsV2) definition.
     */
    constructor(application, options) {
        super(application);
        // Create client
        // - We have to cast "creds as any" to avoid a build break relating to different versions
        //   of autorest being used by our various components.  This is just a build issue and
        //   shouldn't effect production bots.
        const creds = new msRest.TokenCredentials(application.endpointKey);
        const baseUri = application.endpoint || 'https://westus.api.cognitive.microsoft.com';
        this.luisClient = new cognitiveservices_luis_runtime_1.LUISRuntimeClient(creds, baseUri);
        this.options = Object.assign({ includeAllIntents: false, includeInstanceData: true, log: true, spellCheck: false, staging: false, telemetryClient: new botbuilder_core_1.NullTelemetryClient(), logPersonalInformation: false, includeAPIResults: true }, options);
    }
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     * @param context The [TurnContext](xref:botbuilder-core.TurnContext).
     * @returns Analysis of utterance in form of [RecognizerResult](xref:botbuilder-core.RecognizerResult).
     */
    recognizeInternal(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const luisPredictionOptions = this.options;
            const utterance = context.activity.text || '';
            if (!utterance.trim()) {
                // Bypass LUIS if the activity's text is null or whitespace
                return {
                    text: utterance,
                    intents: {},
                    entities: {},
                };
            }
            const luisResult = yield this.luisClient.prediction.resolve(this.application.applicationId, utterance, Object.assign({ verbose: luisPredictionOptions.includeAllIntents, customHeaders: {
                    'Ocp-Apim-Subscription-Key': this.application.endpointKey,
                    'User-Agent': this.getUserAgent(),
                } }, luisPredictionOptions));
            // Map results
            const result = {
                text: luisResult.query,
                alteredText: luisResult.alteredQuery,
                intents: this.getIntents(luisResult),
                entities: this.getEntitiesAndMetadata(luisResult.entities, luisResult.compositeEntities, luisPredictionOptions.includeInstanceData === undefined || luisPredictionOptions.includeInstanceData),
                sentiment: this.getSentiment(luisResult),
                luisResult: luisPredictionOptions.includeAPIResults ? luisResult : null,
            };
            this.emitTraceInfo(context, luisResult, result);
            return result;
        });
    }
    /**
     * Remove role and ensure that dot and space are not a part of entity names since we want to do JSON paths.
     * @param name Value to be normalized.
     * @returns Normalized string value.
     */
    normalizeName(name) {
        return name.replace(/\.| /g, '_');
    }
    /**
     * Get Intents from a LuisResult object.
     * @param luisResult Prediction, based on the input query, containing intent(s) and entities.
     * @returns LUIS Intents with a score number.
     */
    getIntents(luisResult) {
        const intents = {};
        if (luisResult.intents) {
            luisResult.intents.reduce((prev, curr) => {
                prev[this.normalizeName(curr.intent)] = { score: curr.score };
                return prev;
            }, intents);
        }
        else {
            const topScoringIntent = luisResult.topScoringIntent;
            intents[this.normalizeName(topScoringIntent.intent)] = { score: topScoringIntent.score };
        }
        return intents;
    }
    /**
     * @private
     */
    getEntitiesAndMetadata(entities, compositeEntities, verbose) {
        const entitiesAndMetadata = verbose ? { $instance: {} } : {};
        let compositeEntityTypes = [];
        // We start by populating composite entities so that entities covered by them are removed from the entities list
        if (compositeEntities) {
            compositeEntityTypes = compositeEntities.map((compositeEntity) => compositeEntity.parentType);
            compositeEntities.forEach((compositeEntity) => {
                entities = this.populateCompositeEntity(compositeEntity, entities, entitiesAndMetadata, verbose);
            });
        }
        entities.forEach((entity) => {
            // we'll address composite entities separately
            if (compositeEntityTypes.indexOf(entity.type) > -1) {
                return;
            }
            const val = this.getEntityValue(entity);
            if (val != null) {
                this.addProperty(entitiesAndMetadata, this.getNormalizedEntityName(entity), val);
                if (verbose) {
                    this.addProperty(entitiesAndMetadata.$instance, this.getNormalizedEntityName(entity), this.getEntityMetadata(entity));
                }
            }
        });
        return entitiesAndMetadata;
    }
    /**
     * @private
     */
    populateCompositeEntity(compositeEntity, entities, entitiesAndMetadata, verbose) {
        const childrenEntities = verbose ? { $instance: {} } : {};
        let childrenEntitiesMetadata = {};
        // This is now implemented as O(n^2) search and can be reduced to O(2n) using a map as an optimization if n grows
        const compositeEntityMetadata = entities.find((entity) => {
            // For now we are matching by value, which can be ambiguous if the same composite entity shows up with the same text
            // multiple times within an utterance, but this is just a stop gap solution till the indices are included in composite entities
            return entity.type === compositeEntity.parentType && entity.entity === compositeEntity.value;
        });
        const filteredEntities = [];
        if (verbose) {
            childrenEntitiesMetadata = this.getEntityMetadata(compositeEntityMetadata);
        }
        // This is now implemented as O(n*k) search and can be reduced to O(n + k) using a map as an optimization if n or k grow
        const coveredSet = new Set();
        compositeEntity.children.forEach((childEntity) => {
            for (let i = 0; i < entities.length; i++) {
                const entity = entities[i];
                if (!coveredSet.has(i) &&
                    childEntity.type === entity.type &&
                    compositeEntityMetadata &&
                    entity.startIndex !== undefined &&
                    compositeEntityMetadata.startIndex !== undefined &&
                    entity.startIndex >= compositeEntityMetadata.startIndex &&
                    entity.endIndex !== undefined &&
                    compositeEntityMetadata.endIndex !== undefined &&
                    entity.endIndex <= compositeEntityMetadata.endIndex) {
                    // Add to the set to ensure that we don't consider the same child entity more than once per composite
                    coveredSet.add(i);
                    const val = this.getEntityValue(entity);
                    if (val != null) {
                        this.addProperty(childrenEntities, this.getNormalizedEntityName(entity), val);
                        if (verbose) {
                            this.addProperty(childrenEntities.$instance, this.getNormalizedEntityName(entity), this.getEntityMetadata(entity));
                        }
                    }
                }
            }
        });
        // filter entities that were covered by this composite entity
        for (let i = 0; i < entities.length; i++) {
            if (!coveredSet.has(i)) {
                filteredEntities.push(entities[i]);
            }
        }
        this.addProperty(entitiesAndMetadata, this.getNormalizedEntityName(compositeEntityMetadata), childrenEntities);
        if (verbose) {
            this.addProperty(entitiesAndMetadata.$instance, this.getNormalizedEntityName(compositeEntityMetadata), childrenEntitiesMetadata);
        }
        return filteredEntities;
    }
    /**
     * @private
     */
    getEntityValue(entity) {
        if (entity.type.startsWith('builtin.geographyV2.')) {
            return {
                type: entity.type.substring(20),
                location: entity.entity,
            };
        }
        if (entity.type.startsWith('builtin.ordinalV2')) {
            return {
                relativeTo: entity.resolution.relativeTo,
                offset: Number(entity.resolution.offset),
            };
        }
        if (!entity.resolution) {
            return entity.entity;
        }
        if (entity.type.startsWith('builtin.datetimeV2.')) {
            if (!entity.resolution.values || !entity.resolution.values.length) {
                return entity.resolution;
            }
            const vals = entity.resolution.values;
            const type = vals[0].type;
            const timexes = vals.map((t) => t.timex);
            const distinct = timexes.filter((v, i, a) => a.indexOf(v) === i);
            return { type: type, timex: distinct };
        }
        else {
            const res = entity.resolution;
            switch (entity.type) {
                case 'builtin.number':
                case 'builtin.ordinal':
                    return Number(res.value);
                case 'builtin.percentage': {
                    let svalue = res.value;
                    if (svalue.endsWith('%')) {
                        svalue = svalue.substring(0, svalue.length - 1);
                    }
                    return Number(svalue);
                }
                case 'builtin.age':
                case 'builtin.dimension':
                case 'builtin.currency':
                case 'builtin.temperature': {
                    const val = res.value;
                    const obj = {};
                    if (val) {
                        obj.number = Number(val);
                    }
                    obj.units = res.unit;
                    return obj;
                }
                default:
                    // This will return null if there is no value/values which can happen when a new prebuilt is introduced
                    return entity.resolution.value ? entity.resolution.value : entity.resolution.values;
            }
        }
    }
    /**
     * @private
     */
    getEntityMetadata(entity) {
        const res = {
            startIndex: entity.startIndex,
            endIndex: entity.endIndex + 1,
            score: entity.score,
            text: entity.entity,
            type: entity.type,
        };
        if (entity.resolution && entity.resolution.subtype) {
            res.subtype = entity.resolution.subtype;
        }
        return res;
    }
    /**
     * @private
     */
    getNormalizedEntityName(entity) {
        // Type::Role -> Role
        let type = entity.type.split(':').pop();
        if (type.startsWith('builtin.datetimeV2.')) {
            type = 'datetime';
        }
        else if (type.startsWith('builtin.currency')) {
            type = 'money';
        }
        else if (type.startsWith('builtin.geographyV2')) {
            type = 'geographyV2';
        }
        else if (type.startsWith('builtin.ordinalV2')) {
            type = 'ordinalV2';
        }
        else if (type.startsWith('builtin.')) {
            type = type.substring(8);
        }
        if (entity.role !== null && entity.role !== '' && entity.role !== undefined) {
            type = entity.role;
        }
        return type.replace(/\.|\s/g, '_');
    }
    /**
     * If a property doesn't exist add it to a new array, otherwise append it to the existing array
     * @param obj Object on which the property is to be set
     * @param key Property Key
     * @param value Property Value
     */
    addProperty(obj, key, value) {
        if (key in obj) {
            obj[key] = obj[key].concat(value);
        }
        else {
            obj[key] = [value];
        }
    }
    /**
     * @private
     */
    getSentiment(luis) {
        let result;
        if (luis.sentimentAnalysis) {
            result = {
                label: luis.sentimentAnalysis.label,
                score: luis.sentimentAnalysis.score,
            };
        }
        return result;
    }
    /**
     * @private
     */
    getUserAgent() {
        // Note when the ms-rest dependency the LuisClient uses has been updated
        // this code should be modified to use the client's addUserAgentInfo() function.
        const packageUserAgent = `${pjson.name}/${pjson.version}`;
        const platformUserAgent = `(${os.arch()}-${os.type()}-${os.release()}; Node.js,Version=${process.version})`;
        const userAgent = `${packageUserAgent} ${platformUserAgent}`;
        return userAgent;
    }
    /**
     * @private
     */
    emitTraceInfo(context, luisResult, recognizerResult) {
        const traceInfo = {
            recognizerResult: recognizerResult,
            luisResult: luisResult,
            luisOptions: {
                Staging: this.options.staging,
            },
            luisModel: {
                ModelID: this.application.applicationId,
            },
        };
        return context.sendActivity({
            type: 'trace',
            valueType: LUIS_TRACE_TYPE,
            name: LUIS_TRACE_NAME,
            label: LUIS_TRACE_LABEL,
            value: traceInfo,
        });
    }
}
exports.LuisRecognizerV2 = LuisRecognizerV2;
//# sourceMappingURL=luisRecognizerOptionsV2.js.map