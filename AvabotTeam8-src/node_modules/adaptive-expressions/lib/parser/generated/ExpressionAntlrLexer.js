"use strict";
// Generated from src/parser/ExpressionAntlrLexer.g4 by ANTLR 4.7.3-SNAPSHOT
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class ExpressionAntlrLexer extends Lexer_1.Lexer {
    constructor(input) {
        super(input);
        // tslint:enable:no-trailing-whitespace
        this.ignoreWS = true; // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(ExpressionAntlrLexer._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return ExpressionAntlrLexer.VOCABULARY;
    }
    // @Override
    get grammarFileName() { return "ExpressionAntlrLexer.g4"; }
    // @Override
    get ruleNames() { return ExpressionAntlrLexer.ruleNames; }
    // @Override
    get serializedATN() { return ExpressionAntlrLexer._serializedATN; }
    // @Override
    get channelNames() { return ExpressionAntlrLexer.channelNames; }
    // @Override
    get modeNames() { return ExpressionAntlrLexer.modeNames; }
    // @Override
    action(_localctx, ruleIndex, actionIndex) {
        switch (ruleIndex) {
            case 3:
                this.STRING_INTERPOLATION_START_action(_localctx, actionIndex);
                break;
            case 38:
                this.STRING_INTERPOLATION_END_action(_localctx, actionIndex);
                break;
        }
    }
    STRING_INTERPOLATION_START_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 0:
                this.ignoreWS = false;
                break;
        }
    }
    STRING_INTERPOLATION_END_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 1:
                this.ignoreWS = true;
                break;
        }
    }
    // @Override
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 33:
                return this.WHITESPACE_sempred(_localctx, predIndex);
        }
        return true;
    }
    WHITESPACE_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.ignoreWS;
        }
        return true;
    }
    static get _ATN() {
        if (!ExpressionAntlrLexer.__ATN) {
            ExpressionAntlrLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrLexer._serializedATN));
        }
        return ExpressionAntlrLexer.__ATN;
    }
}
ExpressionAntlrLexer.STRING_INTERPOLATION_START = 1;
ExpressionAntlrLexer.PLUS = 2;
ExpressionAntlrLexer.SUBSTRACT = 3;
ExpressionAntlrLexer.NON = 4;
ExpressionAntlrLexer.XOR = 5;
ExpressionAntlrLexer.ASTERISK = 6;
ExpressionAntlrLexer.SLASH = 7;
ExpressionAntlrLexer.PERCENT = 8;
ExpressionAntlrLexer.DOUBLE_EQUAL = 9;
ExpressionAntlrLexer.NOT_EQUAL = 10;
ExpressionAntlrLexer.SINGLE_AND = 11;
ExpressionAntlrLexer.DOUBLE_AND = 12;
ExpressionAntlrLexer.DOUBLE_VERTICAL_CYLINDER = 13;
ExpressionAntlrLexer.LESS_THAN = 14;
ExpressionAntlrLexer.MORE_THAN = 15;
ExpressionAntlrLexer.LESS_OR_EQUAl = 16;
ExpressionAntlrLexer.MORE_OR_EQUAL = 17;
ExpressionAntlrLexer.OPEN_BRACKET = 18;
ExpressionAntlrLexer.CLOSE_BRACKET = 19;
ExpressionAntlrLexer.DOT = 20;
ExpressionAntlrLexer.OPEN_SQUARE_BRACKET = 21;
ExpressionAntlrLexer.CLOSE_SQUARE_BRACKET = 22;
ExpressionAntlrLexer.OPEN_CURLY_BRACKET = 23;
ExpressionAntlrLexer.CLOSE_CURLY_BRACKET = 24;
ExpressionAntlrLexer.COMMA = 25;
ExpressionAntlrLexer.COLON = 26;
ExpressionAntlrLexer.ARROW = 27;
ExpressionAntlrLexer.NULL_COALESCE = 28;
ExpressionAntlrLexer.QUESTION_MARK = 29;
ExpressionAntlrLexer.NUMBER = 30;
ExpressionAntlrLexer.WHITESPACE = 31;
ExpressionAntlrLexer.IDENTIFIER = 32;
ExpressionAntlrLexer.NEWLINE = 33;
ExpressionAntlrLexer.STRING = 34;
ExpressionAntlrLexer.INVALID_TOKEN_DEFAULT_MODE = 35;
ExpressionAntlrLexer.TEMPLATE = 36;
ExpressionAntlrLexer.ESCAPE_CHARACTER = 37;
ExpressionAntlrLexer.TEXT_CONTENT = 38;
ExpressionAntlrLexer.STRING_INTERPOLATION_MODE = 1;
// tslint:disable:no-trailing-whitespace
ExpressionAntlrLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
ExpressionAntlrLexer.modeNames = [
    "DEFAULT_MODE", "STRING_INTERPOLATION_MODE",
];
ExpressionAntlrLexer.ruleNames = [
    "LETTER", "DIGIT", "OBJECT_DEFINITION", "STRING_INTERPOLATION_START",
    "PLUS", "SUBSTRACT", "NON", "XOR", "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL",
    "NOT_EQUAL", "SINGLE_AND", "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN",
    "MORE_THAN", "LESS_OR_EQUAl", "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET",
    "DOT", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET",
    "CLOSE_CURLY_BRACKET", "COMMA", "COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK",
    "NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE",
    "STRING_INTERPOLATION_END", "TEMPLATE", "ESCAPE_CHARACTER", "TEXT_CONTENT",
];
ExpressionAntlrLexer._LITERAL_NAMES = [
    undefined, undefined, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'",
    "'=='", undefined, "'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='",
    "'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "':'", "'=>'",
    "'??'", "'?'",
];
ExpressionAntlrLexer._SYMBOLIC_NAMES = [
    undefined, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR",
    "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND",
    "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl",
    "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET",
    "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA",
    "COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE",
    "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE",
    "ESCAPE_CHARACTER", "TEXT_CONTENT",
];
ExpressionAntlrLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES, ExpressionAntlrLexer._SYMBOLIC_NAMES, []);
ExpressionAntlrLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02(\u0110\b\x01" +
    "\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
    "\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
    "\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
    "\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04" +
    "\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04" +
    "\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04" +
    "\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*" +
    "\t*\x04+\t+\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
    "\x04\x05\x04a\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04g\n\x04\r\x04" +
    "\x0E\x04h\x07\x04k\n\x04\f\x04\x0E\x04n\v\x04\x03\x04\x03\x04\x03\x05" +
    "\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b" +
    "\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03" +
    "\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x8C\n\x0E\x03\x0F\x03\x0F\x03" +
    "\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
    "\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
    "\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03" +
    "\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03" +
    "\x1F\x03 \x03 \x03 \x03!\x03!\x03\"\x06\"\xBB\n\"\r\"\x0E\"\xBC\x03\"" +
    "\x03\"\x06\"\xC1\n\"\r\"\x0E\"\xC2\x05\"\xC5\n\"\x03#\x03#\x03#\x03#\x03" +
    "#\x03$\x03$\x03$\x03$\x03$\x05$\xD1\n$\x03$\x03$\x03$\x07$\xD6\n$\f$\x0E" +
    "$\xD9\v$\x03%\x05%\xDC\n%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x07" +
    "&\xE6\n&\f&\x0E&\xE9\v&\x03&\x03&\x03&\x03&\x03&\x07&\xF0\n&\f&\x0E&\xF3" +
    "\v&\x03&\x05&\xF6\n&\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03" +
    ")\x03)\x03)\x03)\x06)\u0105\n)\r)\x0E)\u0106\x03)\x03)\x03*\x03*\x05*" +
    "\u010D\n*\x03+\x03+\x04\xE7\xF1\x02\x02,\x04\x02\x02\x06\x02\x02\b\x02" +
    "\x02\n\x02\x03\f\x02\x04\x0E\x02\x05\x10\x02\x06\x12\x02\x07\x14\x02\b" +
    "\x16\x02\t\x18\x02\n\x1A\x02\v\x1C\x02\f\x1E\x02\r \x02\x0E\"\x02\x0F" +
    "$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02\x14.\x02\x150\x02\x162\x02\x17" +
    "4\x02\x186\x02\x198\x02\x1A:\x02\x1B<\x02\x1C>\x02\x1D@\x02\x1EB\x02\x1F" +
    "D\x02 F\x02!H\x02\"J\x02#L\x02$N\x02%P\x02\x02R\x02&T\x02\'V\x02(\x04" +
    "\x02\x03\f\x04\x02C\\c|\x03\x022;\t\x02\f\f\x0F\x0F$$))bb}}\x7F\x7F\x06" +
    "\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x05\x02%%BBaa\x04\x02))^^\x03\x02))\x04" +
    "\x02$$^^\x03\x02$$\x04\x02\f\f\x0F\x0F\x02\u0125\x02\n\x03\x02\x02\x02" +
    "\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02" +
    "\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02" +
    "\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02\x1C\x03\x02\x02\x02" +
    "\x02\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02\"\x03\x02\x02\x02\x02" +
    "$\x03\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03\x02\x02\x02\x02*\x03\x02" +
    "\x02\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02\x02\x020\x03\x02\x02\x02" +
    "\x022\x03\x02\x02\x02\x024\x03\x02\x02\x02\x026\x03\x02\x02\x02\x028\x03" +
    "\x02\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02\x02\x02\x02>\x03\x02\x02" +
    "\x02\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02\x02D\x03\x02\x02\x02\x02" +
    "F\x03\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03\x02\x02\x02\x02L\x03\x02" +
    "\x02\x02\x02N\x03\x02\x02\x02\x03P\x03\x02\x02\x02\x03R\x03\x02\x02\x02" +
    "\x03T\x03\x02\x02\x02\x03V\x03\x02\x02\x02\x04X\x03\x02\x02\x02\x06Z\x03" +
    "\x02\x02\x02\b\\\x03\x02\x02\x02\nq\x03\x02\x02\x02\fv\x03\x02\x02\x02" +
    "\x0Ex\x03\x02\x02\x02\x10z\x03\x02\x02\x02\x12|\x03\x02\x02\x02\x14~\x03" +
    "\x02\x02\x02\x16\x80\x03\x02\x02\x02\x18\x82\x03\x02\x02\x02\x1A\x84\x03" +
    "\x02\x02\x02\x1C\x8B\x03\x02\x02\x02\x1E\x8D\x03\x02\x02\x02 \x8F\x03" +
    "\x02\x02\x02\"\x92\x03\x02\x02\x02$\x95\x03\x02\x02\x02&\x97\x03\x02\x02" +
    "\x02(\x99\x03\x02\x02\x02*\x9C\x03\x02\x02\x02,\x9F\x03\x02\x02\x02.\xA1" +
    "\x03\x02\x02\x020\xA3\x03\x02\x02\x022\xA5\x03\x02\x02\x024\xA7\x03\x02" +
    "\x02\x026\xA9\x03\x02\x02\x028\xAB\x03\x02\x02\x02:\xAD\x03\x02\x02\x02" +
    "<\xAF\x03\x02\x02\x02>\xB1\x03\x02\x02\x02@\xB4\x03\x02\x02\x02B\xB7\x03" +
    "\x02\x02\x02D\xBA\x03\x02\x02\x02F\xC6\x03\x02\x02\x02H\xD0\x03\x02\x02" +
    "\x02J\xDB\x03\x02\x02\x02L\xF5\x03\x02\x02\x02N\xF7\x03\x02\x02\x02P\xF9" +
    "\x03\x02\x02\x02R\xFF\x03\x02\x02\x02T\u010A\x03\x02\x02\x02V\u010E\x03" +
    "\x02\x02\x02XY\t\x02\x02\x02Y\x05\x03\x02\x02\x02Z[\t\x03\x02\x02[\x07" +
    "\x03\x02\x02\x02\\l\x07}\x02\x02]k\x05F#\x02^a\x05H$\x02_a\x05L&\x02`" +
    "^\x03\x02\x02\x02`_\x03\x02\x02\x02ab\x03\x02\x02\x02bf\x07<\x02\x02c" +
    "g\x05L&\x02dg\n\x04\x02\x02eg\x05\b\x04\x02fc\x03\x02\x02\x02fd\x03\x02" +
    "\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02" +
    "\x02\x02ik\x03\x02\x02\x02j]\x03\x02\x02\x02j`\x03\x02\x02\x02kn\x03\x02" +
    "\x02\x02lj\x03\x02\x02\x02lm\x03\x02\x02\x02mo\x03\x02\x02\x02nl\x03\x02" +
    "\x02\x02op\x07\x7F\x02\x02p\t\x03\x02\x02\x02qr\x07b\x02\x02rs\b\x05\x02" +
    "\x02st\x03\x02\x02\x02tu\b\x05\x03\x02u\v\x03\x02\x02\x02vw\x07-\x02\x02" +
    "w\r\x03\x02\x02\x02xy\x07/\x02\x02y\x0F\x03\x02\x02\x02z{\x07#\x02\x02" +
    "{\x11\x03\x02\x02\x02|}\x07`\x02\x02}\x13\x03\x02\x02\x02~\x7F\x07,\x02" +
    "\x02\x7F\x15\x03\x02\x02\x02\x80\x81\x071\x02\x02\x81\x17\x03\x02\x02" +
    "\x02\x82\x83\x07\'\x02\x02\x83\x19\x03\x02\x02\x02\x84\x85\x07?\x02\x02" +
    "\x85\x86\x07?\x02\x02\x86\x1B\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88" +
    "\x8C\x07?\x02\x02\x89\x8A\x07>\x02\x02\x8A\x8C\x07@\x02\x02\x8B\x87\x03" +
    "\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8C\x1D\x03\x02\x02\x02\x8D\x8E\x07" +
    "(\x02\x02\x8E\x1F\x03\x02\x02\x02\x8F\x90\x07(\x02\x02\x90\x91\x07(\x02" +
    "\x02\x91!\x03\x02\x02\x02\x92\x93\x07~\x02\x02\x93\x94\x07~\x02\x02\x94" +
    "#\x03\x02\x02\x02\x95\x96\x07>\x02\x02\x96%\x03\x02\x02\x02\x97\x98\x07" +
    "@\x02\x02\x98\'\x03\x02\x02\x02\x99\x9A\x07>\x02\x02\x9A\x9B\x07?\x02" +
    "\x02\x9B)\x03\x02\x02\x02\x9C\x9D\x07@\x02\x02\x9D\x9E\x07?\x02\x02\x9E" +
    "+\x03\x02\x02\x02\x9F\xA0\x07*\x02\x02\xA0-\x03\x02\x02\x02\xA1\xA2\x07" +
    "+\x02\x02\xA2/\x03\x02\x02\x02\xA3\xA4\x070\x02\x02\xA41\x03\x02\x02\x02" +
    "\xA5\xA6\x07]\x02\x02\xA63\x03\x02\x02\x02\xA7\xA8\x07_\x02\x02\xA85\x03" +
    "\x02\x02\x02\xA9\xAA\x07}\x02\x02\xAA7\x03\x02\x02\x02\xAB\xAC\x07\x7F" +
    "\x02\x02\xAC9\x03\x02\x02\x02\xAD\xAE\x07.\x02\x02\xAE;\x03\x02\x02\x02" +
    "\xAF\xB0\x07<\x02\x02\xB0=\x03\x02\x02\x02\xB1\xB2\x07?\x02\x02\xB2\xB3" +
    "\x07@\x02\x02\xB3?\x03\x02\x02\x02\xB4\xB5\x07A\x02\x02\xB5\xB6\x07A\x02" +
    "\x02\xB6A\x03\x02\x02\x02\xB7\xB8\x07A\x02\x02\xB8C\x03\x02\x02\x02\xB9" +
    "\xBB\x05\x06\x03\x02\xBA\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC" +
    "\xBA\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xC4\x03\x02\x02\x02\xBE" +
    "\xC0\x070\x02\x02\xBF\xC1\x05\x06\x03\x02\xC0\xBF\x03\x02\x02\x02\xC1" +
    "\xC2\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3" +
    "\xC5\x03\x02\x02\x02\xC4\xBE\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5" +
    "E\x03\x02\x02\x02\xC6\xC7\t\x05\x02\x02\xC7\xC8\x06#\x02\x02\xC8\xC9\x03" +
    "\x02\x02\x02\xC9\xCA\b#\x04\x02\xCAG\x03\x02\x02\x02\xCB\xD1\x05\x04\x02" +
    "\x02\xCC\xD1\t\x06\x02\x02\xCD\xCE\x07B\x02\x02\xCE\xD1\x07B\x02\x02\xCF" +
    "\xD1\x04&\'\x02\xD0\xCB\x03\x02\x02\x02\xD0\xCC\x03\x02\x02\x02\xD0\xCD" +
    "\x03\x02\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1\xD7\x03\x02\x02\x02\xD2\xD6" +
    "\x05\x04\x02\x02\xD3\xD6\x05\x06\x03\x02\xD4\xD6\x07a\x02\x02\xD5\xD2" +
    "\x03\x02\x02\x02\xD5\xD3\x03\x02\x02\x02\xD5\xD4\x03\x02\x02\x02\xD6\xD9" +
    "\x03\x02\x02\x02\xD7\xD5\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8I" +
    "\x03\x02\x02\x02\xD9\xD7\x03\x02\x02\x02\xDA\xDC\x07\x0F\x02\x02\xDB\xDA" +
    "\x03\x02\x02\x02\xDB\xDC\x03\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD\xDE" +
    "\x07\f\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF\xE0\b%\x04\x02\xE0K\x03\x02" +
    "\x02\x02\xE1\xE7\x07)\x02\x02\xE2\xE3\x07^\x02\x02\xE3\xE6\t\x07\x02\x02" +
    "\xE4\xE6\n\b\x02\x02\xE5\xE2\x03\x02\x02\x02\xE5\xE4\x03\x02\x02\x02\xE6" +
    "\xE9\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE8" +
    "\xEA\x03\x02\x02\x02\xE9\xE7\x03\x02\x02\x02\xEA\xF6\x07)\x02\x02\xEB" +
    "\xF1\x07$\x02\x02\xEC\xED\x07^\x02\x02\xED\xF0\t\t\x02\x02\xEE\xF0\n\n" +
    "\x02\x02\xEF\xEC\x03\x02\x02\x02\xEF\xEE\x03\x02\x02\x02\xF0\xF3\x03\x02" +
    "\x02\x02\xF1\xF2\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF4\x03\x02" +
    "\x02\x02\xF3\xF1\x03\x02\x02\x02\xF4\xF6\x07$\x02\x02\xF5\xE1\x03\x02" +
    "\x02\x02\xF5\xEB\x03\x02\x02\x02\xF6M\x03\x02\x02\x02\xF7\xF8\v\x02\x02" +
    "\x02\xF8O\x03\x02\x02\x02\xF9\xFA\x07b\x02\x02\xFA\xFB\b(\x05\x02\xFB" +
    "\xFC\x03\x02\x02\x02\xFC\xFD\b(\x06\x02\xFD\xFE\b(\x07\x02\xFEQ\x03\x02" +
    "\x02\x02\xFF\u0100\x07&\x02\x02\u0100\u0104\x07}\x02\x02\u0101\u0105\x05" +
    "L&\x02\u0102\u0105\x05\b\x04\x02\u0103\u0105\n\x04\x02\x02\u0104\u0101" +
    "\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0104\u0103\x03\x02\x02\x02" +
    "\u0105\u0106\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03" +
    "\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u0109\x07\x7F\x02\x02\u0109" +
    "S\x03\x02\x02\x02\u010A\u010C\x07^\x02\x02\u010B\u010D\n\v\x02\x02\u010C" +
    "\u010B\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010DU\x03\x02\x02" +
    "\x02\u010E\u010F\v\x02\x02\x02\u010FW\x03\x02\x02\x02\x19\x02\x03`fhj" +
    "l\x8B\xBC\xC2\xC4\xD0\xD5\xD7\xDB\xE5\xE7\xEF\xF1\xF5\u0104\u0106\u010C" +
    "\b\x03\x05\x02\x07\x03\x02\b\x02\x02\x03(\x03\t\x03\x02\x06\x02\x02";
exports.ExpressionAntlrLexer = ExpressionAntlrLexer;
//# sourceMappingURL=ExpressionAntlrLexer.js.map