function cov_1qarz5kalb(){var path="/Users/doudou/COMP0016_2020_21_Team8/AvabotTeam8-src/dialogs/answerDialog.js";var hash="0b203410be36a48acf70c73632cde2caceb4ccf6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/doudou/COMP0016_2020_21_Team8/AvabotTeam8-src/dialogs/answerDialog.js",statementMap:{"0":{start:{line:4,column:57},end:{line:4,column:86}},"1":{start:{line:5,column:21},end:{line:5,column:45}},"2":{start:{line:6,column:39},end:{line:6,column:60}},"3":{start:{line:8,column:22},end:{line:8,column:37}},"4":{start:{line:9,column:25},end:{line:9,column:43}},"5":{start:{line:10,column:20},end:{line:10,column:33}},"6":{start:{line:14,column:8},end:{line:14,column:29}},"7":{start:{line:15,column:8},end:{line:23,column:9}},"8":{start:{line:16,column:12},end:{line:20,column:15}},"9":{start:{line:22,column:12},end:{line:22,column:97}},"10":{start:{line:25,column:8},end:{line:25,column:52}},"11":{start:{line:26,column:8},end:{line:29,column:12}},"12":{start:{line:31,column:8},end:{line:31,column:48}},"13":{start:{line:35,column:20},end:{line:35,column:128}},"14":{start:{line:36,column:30},end:{line:36,column:86}},"15":{start:{line:39,column:8},end:{line:39,column:68}},"16":{start:{line:43,column:8},end:{line:72,column:9}},"17":{start:{line:44,column:43},end:{line:46,column:85}},"18":{start:{line:48,column:12},end:{line:48,column:75}},"19":{start:{line:49,column:12},end:{line:49,column:49}},"20":{start:{line:52,column:12},end:{line:52,column:45}},"21":{start:{line:53,column:12},end:{line:69,column:13}},"22":{start:{line:54,column:35},end:{line:54,column:86}},"23":{start:{line:55,column:26},end:{line:55,column:28}},"24":{start:{line:57,column:16},end:{line:63,column:17}},"25":{start:{line:58,column:20},end:{line:58,column:47}},"26":{start:{line:62,column:20},end:{line:62,column:61}},"27":{start:{line:66,column:16},end:{line:66,column:101}},"28":{start:{line:67,column:16},end:{line:67,column:53}},"29":{start:{line:73,column:8},end:{line:73,column:90}},"30":{start:{line:77,column:0},end:{line:77,column:43}},"31":{start:{line:78,column:0},end:{line:78,column:45}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:18},end:{line:32,column:5}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:33},end:{line:40,column:5}},line:34},"2":{name:"(anonymous_2)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:34},end:{line:74,column:5}},line:42}},branchMap:{"0":{loc:{start:{line:35,column:20},end:{line:35,column:128}},type:"cond-expr",locations:[{start:{line:35,column:53},end:{line:35,column:83}},{start:{line:35,column:86},end:{line:35,column:128}}],line:35},"1":{loc:{start:{line:43,column:8},end:{line:72,column:9}},type:"if",locations:[{start:{line:43,column:8},end:{line:72,column:9}},{start:{line:43,column:8},end:{line:72,column:9}}],line:43},"2":{loc:{start:{line:43,column:12},end:{line:43,column:110}},type:"binary-expr",locations:[{start:{line:43,column:12},end:{line:43,column:43}},{start:{line:43,column:47},end:{line:43,column:74}},{start:{line:43,column:78},end:{line:43,column:110}}],line:43},"3":{loc:{start:{line:57,column:16},end:{line:63,column:17}},type:"if",locations:[{start:{line:57,column:16},end:{line:63,column:17}},{start:{line:57,column:16},end:{line:63,column:17}}],line:57}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0b203410be36a48acf70c73632cde2caceb4ccf6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1qarz5kalb=function(){return actualCoverage;};}return actualCoverage;}cov_1qarz5kalb();// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const{ComponentDialog,TextPrompt,WaterfallDialog}=(cov_1qarz5kalb().s[0]++,require('botbuilder-dialogs'));const{QnAMaker}=(cov_1qarz5kalb().s[1]++,require('botbuilder-ai'));const{MessageFactory,InputHints}=(cov_1qarz5kalb().s[2]++,require('botbuilder'));const ANSWER_DIALOG=(cov_1qarz5kalb().s[3]++,'ANSWER_DIALOG');const WATERFALL_DIALOG=(cov_1qarz5kalb().s[4]++,'WATERFALL_DIALOG');const TEXT_PROMPT=(cov_1qarz5kalb().s[5]++,'TEXT_PROMPT');class AnswerDialog extends ComponentDialog{constructor(){cov_1qarz5kalb().f[0]++;cov_1qarz5kalb().s[6]++;super(ANSWER_DIALOG);cov_1qarz5kalb().s[7]++;try{cov_1qarz5kalb().s[8]++;this.qnaMaker=new QnAMaker({knowledgeBaseId:process.env.QnAKnowledgebaseId,endpointKey:process.env.QnAEndpointKey,host:process.env.QnAEndpointHostName});}catch(err){cov_1qarz5kalb().s[9]++;console.warn(`QnAMaker Exception: ${err} Check your QnAMaker configuration in .env`);}cov_1qarz5kalb().s[10]++;this.addDialog(new TextPrompt(TEXT_PROMPT));cov_1qarz5kalb().s[11]++;this.addDialog(new WaterfallDialog(WATERFALL_DIALOG,[this.beginStep.bind(this),this.answerStep.bind(this)]));cov_1qarz5kalb().s[12]++;this.initialDialogId=WATERFALL_DIALOG;}async beginStep(stepContext){cov_1qarz5kalb().f[1]++;const msg=(cov_1qarz5kalb().s[13]++,stepContext.options.restartMsg?(cov_1qarz5kalb().b[0][0]++,stepContext.options.restartMsg):(cov_1qarz5kalb().b[0][1]++,'Feel free to ask any questions you have.'));const promptOptions=(cov_1qarz5kalb().s[14]++,MessageFactory.text(msg,msg,InputHints.ExpectingInput));// Ask the user to enter their name.
cov_1qarz5kalb().s[15]++;return await stepContext.prompt(TEXT_PROMPT,promptOptions);}async answerStep(stepContext){cov_1qarz5kalb().f[2]++;cov_1qarz5kalb().s[16]++;if((cov_1qarz5kalb().b[2][0]++,!process.env.QnAKnowledgebaseId)||(cov_1qarz5kalb().b[2][1]++,!process.env.QnAEndpointKey)||(cov_1qarz5kalb().b[2][2]++,!process.env.QnAEndpointHostName)){cov_1qarz5kalb().b[1][0]++;const unconfiguredQnaMessage=(cov_1qarz5kalb().s[17]++,'NOTE: \r\n'+'QnA Maker is not configured. To enable all capabilities, add `QnAKnowledgebaseId`, `QnAEndpointKey` and `QnAEndpointHostName` to the .env file. \r\n'+'You may visit www.qnamaker.ai to create a QnA Maker knowledge base.');cov_1qarz5kalb().s[18]++;await stepContext.context.sendActivity(unconfiguredQnaMessage);cov_1qarz5kalb().s[19]++;return await stepContext.endDialog();}else{cov_1qarz5kalb().b[1][1]++;cov_1qarz5kalb().s[20]++;console.log('Calling QnA Maker');cov_1qarz5kalb().s[21]++;try{const qnaResults=(cov_1qarz5kalb().s[22]++,await this.qnaMaker.getAnswers(stepContext.context));var msg=(cov_1qarz5kalb().s[23]++,'');// If an answer was received from QnA Maker, send the answer back to the user.
cov_1qarz5kalb().s[24]++;if(qnaResults[0]){cov_1qarz5kalb().b[3][0]++;cov_1qarz5kalb().s[25]++;msg=qnaResults[0].answer;// If no answers were returned from QnA Maker, reply with help.
}else{cov_1qarz5kalb().b[3][1]++;cov_1qarz5kalb().s[26]++;msg='No QnA Maker answers were found.';}}catch(error){cov_1qarz5kalb().s[27]++;await stepContext.context.sendActivity('Sorry, QnA maker is currently unavailable.');cov_1qarz5kalb().s[28]++;return await stepContext.endDialog();}}cov_1qarz5kalb().s[29]++;return await stepContext.replaceDialog(this.initialDialogId,{restartMsg:msg});}}cov_1qarz5kalb().s[30]++;module.exports.AnswerDialog=AnswerDialog;cov_1qarz5kalb().s[31]++;module.exports.ANSWER_DIALOG=ANSWER_DIALOG;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,