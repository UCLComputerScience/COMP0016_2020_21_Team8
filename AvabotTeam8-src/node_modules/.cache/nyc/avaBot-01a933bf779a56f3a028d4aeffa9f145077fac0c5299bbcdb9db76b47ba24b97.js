function cov_2jszjvvphb(){var path="/Users/doudou/COMP0016_2020_21_Team8/AvabotTeam8-src/bots/avaBot.js";var hash="9329a3fcb53fc6eee48804d1fda84a7d4decdb91";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/doudou/COMP0016_2020_21_Team8/AvabotTeam8-src/bots/avaBot.js",statementMap:{"0":{start:{line:1,column:44},end:{line:1,column:65}},"1":{start:{line:2,column:24},end:{line:2,column:54}},"2":{start:{line:11,column:4},end:{line:11,column:12}},"3":{start:{line:12,column:4},end:{line:15,column:8}},"4":{start:{line:13,column:6},end:{line:15,column:8}},"5":{start:{line:16,column:4},end:{line:17,column:76}},"6":{start:{line:17,column:6},end:{line:17,column:76}},"7":{start:{line:18,column:4},end:{line:19,column:73}},"8":{start:{line:19,column:6},end:{line:19,column:73}},"9":{start:{line:21,column:4},end:{line:21,column:47}},"10":{start:{line:22,column:4},end:{line:22,column:31}},"11":{start:{line:23,column:4},end:{line:23,column:25}},"12":{start:{line:24,column:4},end:{line:24,column:76}},"13":{start:{line:29,column:4},end:{line:35,column:7}},"14":{start:{line:30,column:6},end:{line:30,column:36}},"15":{start:{line:31,column:6},end:{line:31,column:59}},"16":{start:{line:33,column:6},end:{line:33,column:55}},"17":{start:{line:34,column:6},end:{line:34,column:19}},"18":{start:{line:40,column:4},end:{line:49,column:7}},"19":{start:{line:41,column:6},end:{line:41,column:35}},"20":{start:{line:42,column:27},end:{line:42,column:56}},"21":{start:{line:43,column:6},end:{line:47,column:7}},"22":{start:{line:43,column:21},end:{line:43,column:22}},"23":{start:{line:44,column:8},end:{line:46,column:9}},"24":{start:{line:45,column:10},end:{line:45,column:51}},"25":{start:{line:48,column:6},end:{line:48,column:19}},"26":{start:{line:56,column:4},end:{line:56,column:29}},"27":{start:{line:59,column:4},end:{line:59,column:61}},"28":{start:{line:60,column:4},end:{line:60,column:53}},"29":{start:{line:68,column:24},end:{line:74,column:5}},"30":{start:{line:76,column:16},end:{line:84,column:5}},"31":{start:{line:85,column:4},end:{line:85,column:42}},"32":{start:{line:89,column:0},end:{line:89,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:2},end:{line:10,column:3}},loc:{start:{line:10,column:52},end:{line:50,column:3}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:19},end:{line:29,column:20}},loc:{start:{line:29,column:44},end:{line:35,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:40,column:24},end:{line:40,column:25}},loc:{start:{line:40,column:49},end:{line:49,column:5}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:55,column:2},end:{line:55,column:3}},loc:{start:{line:55,column:21},end:{line:61,column:3}},line:55},"4":{name:"(anonymous_4)",decl:{start:{line:67,column:2},end:{line:67,column:3}},loc:{start:{line:67,column:42},end:{line:86,column:3}},line:67}},branchMap:{"0":{loc:{start:{line:12,column:4},end:{line:15,column:8}},type:"if",locations:[{start:{line:12,column:4},end:{line:15,column:8}},{start:{line:12,column:4},end:{line:15,column:8}}],line:12},"1":{loc:{start:{line:16,column:4},end:{line:17,column:76}},type:"if",locations:[{start:{line:16,column:4},end:{line:17,column:76}},{start:{line:16,column:4},end:{line:17,column:76}}],line:16},"2":{loc:{start:{line:18,column:4},end:{line:19,column:73}},type:"if",locations:[{start:{line:18,column:4},end:{line:19,column:73}},{start:{line:18,column:4},end:{line:19,column:73}}],line:18},"3":{loc:{start:{line:44,column:8},end:{line:46,column:9}},type:"if",locations:[{start:{line:44,column:8},end:{line:46,column:9}},{start:{line:44,column:8},end:{line:46,column:9}}],line:44}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9329a3fcb53fc6eee48804d1fda84a7d4decdb91"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jszjvvphb=function(){return actualCoverage;};}return actualCoverage;}cov_2jszjvvphb();const{ActivityHandler,MessageFactory}=(cov_2jszjvvphb().s[0]++,require("botbuilder"));const{ActionTypes}=(cov_2jszjvvphb().s[1]++,require("botframework-schema"));class AvaBot extends ActivityHandler{/**
   * @param {ConversationState} conversationState
   * @param {UserState} userState
   * @param {Dialog} dialog
   */constructor(conversationState,userState,dialog){cov_2jszjvvphb().f[0]++;cov_2jszjvvphb().s[2]++;super();cov_2jszjvvphb().s[3]++;if(!conversationState){cov_2jszjvvphb().b[0][0]++;cov_2jszjvvphb().s[4]++;throw new Error("[AvaBot]: Missing parameter. conversationState is required");}else{cov_2jszjvvphb().b[0][1]++;}cov_2jszjvvphb().s[5]++;if(!userState){cov_2jszjvvphb().b[1][0]++;cov_2jszjvvphb().s[6]++;throw new Error("[AvaBot]: Missing parameter. userState is required");}else{cov_2jszjvvphb().b[1][1]++;}cov_2jszjvvphb().s[7]++;if(!dialog){cov_2jszjvvphb().b[2][0]++;cov_2jszjvvphb().s[8]++;throw new Error("[AvaBot]: Missing parameter. dialog is required");}else{cov_2jszjvvphb().b[2][1]++;}cov_2jszjvvphb().s[9]++;this.conversationState=conversationState;cov_2jszjvvphb().s[10]++;this.userState=userState;cov_2jszjvvphb().s[11]++;this.dialog=dialog;cov_2jszjvvphb().s[12]++;this.dialogState=this.conversationState.createProperty("DialogState");/**
     * OnMessage is called for each user input received.
     */cov_2jszjvvphb().s[13]++;this.onMessage(async(context,next)=>{cov_2jszjvvphb().f[1]++;cov_2jszjvvphb().s[14]++;console.log(context.activity);cov_2jszjvvphb().s[15]++;console.log("Running dialog with Message Activity.");// Run the Dialog with the new message Activity.
cov_2jszjvvphb().s[16]++;await this.dialog.run(context,this.dialogState);cov_2jszjvvphb().s[17]++;await next();});/**
     * onMembersAdded is called when a user joins in, and sends a greeting message.
     */cov_2jszjvvphb().s[18]++;this.onMembersAdded(async(context,next)=>{cov_2jszjvvphb().f[2]++;cov_2jszjvvphb().s[19]++;console.log(context.activity);const membersAdded=(cov_2jszjvvphb().s[20]++,context.activity.membersAdded);cov_2jszjvvphb().s[21]++;for(let cnt=(cov_2jszjvvphb().s[22]++,0);cnt<membersAdded.length;cnt++){cov_2jszjvvphb().s[23]++;if(membersAdded[cnt].id==context.activity.recipient.id){cov_2jszjvvphb().b[3][0]++;cov_2jszjvvphb().s[24]++;await this.sendSuggestedActions(context);}else{cov_2jszjvvphb().b[3][1]++;}}cov_2jszjvvphb().s[25]++;await next();});}/**
   * Override the ActivityHandler.run() method to save state changes after the bot logic completes.
   */async run(context){cov_2jszjvvphb().f[3]++;cov_2jszjvvphb().s[26]++;await super.run(context);// Save any state changes. The load happened during the execution of the Dialog.
cov_2jszjvvphb().s[27]++;await this.conversationState.saveChanges(context,false);cov_2jszjvvphb().s[28]++;await this.userState.saveChanges(context,false);}/**
   * Send suggested actions to the user.
   * @param {TurnContext} turnContext A TurnContext instance containing all the data needed for processing this conversation turn.
   */async sendSuggestedActions(turnContext){cov_2jszjvvphb().f[4]++;const cardActions=(cov_2jszjvvphb().s[29]++,[{type:ActionTypes.PostBack,title:"Got it!",value:"Got it!"}]);var reply=(cov_2jszjvvphb().s[30]++,MessageFactory.suggestedActions(cardActions,"Hi, I am AvaBot, your remote-working assistant. I can answer questions you have about the company and help you with documents.\n"+"\nFor the document, you can \n"+"1. ask me to summarize it so that you will know what it's about\n"+"2. ask me to extract table data from it\n"+"3. ask me any question about the document, and I will try to answer it\n"+"\nYou can also send me an image, I will detect familiar patterns and extract text for you."));cov_2jszjvvphb().s[31]++;await turnContext.sendActivity(reply);}}cov_2jszjvvphb().s[32]++;module.exports.AvaBot=AvaBot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,