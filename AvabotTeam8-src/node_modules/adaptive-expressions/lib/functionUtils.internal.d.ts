/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Moment } from 'moment';
import { Expression } from './expression';
import { Options } from './options';
import { EvaluateExpressionDelegate, ValueWithError } from './expressionEvaluator';
import { MemoryInterface } from './memory';
import { TimexProperty } from '@microsoft/recognizers-text-data-types-timex-expression';
import bigInt = require('big-integer');
/**
 * Utility functions only used internal
 */
export declare class InternalFunctionUtils {
    /**
     * Constant for converting unix timestamp to ticks.
     */
    static readonly UnixMilliSecondToTicksConstant: bigInt.BigInteger;
    /**
     * Constant to convert between ticks and ms.
     */
    static readonly MillisecondToTickConstant: bigInt.BigInteger;
    /**
     * Parse timex funcition.
     * @param timexExpr String or TimexProperty input.
     * @returns TimexProperty and error.
     */
    static parseTimexProperty(timexExpr: any): {
        timexProperty: TimexProperty;
        error: string;
    };
    /**
     * Convert string into Uint8Array object.
     * @param stringToConvert Input string.
     */
    static toBinary(stringToConvert: string): Uint8Array;
    /**
     * Sort helper function.
     * @param isDescending Descending flag.
     */
    static sortBy(isDescending: boolean): EvaluateExpressionDelegate;
    /**
     * Lookup a string or number index of an Object.
     * @param instance Instance with property.
     * @param property Property to lookup.
     * @returns Value and error information if any.
     */
    static accessIndex(instance: any, index: number): ValueWithError;
    /**
     * Verify a timestamp string is valid timestamp format.
     * @param value Timestamp string to check.
     * @returns Error or undefined if invalid.
     */
    static verifyTimestamp(value: any): string | undefined;
    /**
     * Verify a timestamp string is valid ISO timestamp format.
     * @param value Timestamp string to check.
     * @returns Error or undefined if invalid.
     */
    static verifyISOTimestamp(value: any): string | undefined;
    /**
     * Transform a timestamp into another with customized function.
     * @param timeStamp Original time stamp.
     * @param transform Transform function.
     * @returns New timestamp and error.
     */
    static parseTimestamp(timeStamp: string, transform?: (arg0: Date) => any): ValueWithError;
    /**
     * Convert a string input to ticks number.
     * @param timeStamp String timestamp input.
     */
    static ticks(timeStamp: string): ValueWithError;
    /**
     * Lookup a property in Map or Object.
     * @param instance Instance with property.
     * @param property Property to lookup.
     * @returns Value and error information if any.
     */
    static accessProperty(instance: any, property: string): ValueWithError;
    /**
     * Get the value of a path from a memory
     * @param state Memory.
     * @param path Path string.
     * @param options Options.
     */
    static wrapGetValue(state: MemoryInterface, path: string, options: Options): any;
    /**
     * Wrap string or undefined into string. Default to empty string.
     * @param input Input string
     */
    static parseStringOrUndefined(input: string | undefined): string;
    /**
     * Test result to see if True in logical comparison functions.
     * @param instance Computed value.
     * @returns True if boolean true or non-null.
     */
    static isLogicTrue(instance: any): boolean;
    /**
     * Evaluator for foreach and select functions.
     * @param expression Expression.
     * @param state Memory scope.
     * @param options Options.
     */
    static foreach(expression: Expression, state: MemoryInterface, options: Options): ValueWithError;
    /**
     * Validator for foreach, select, and where functions.
     * @param expression
     */
    static validateForeach(expression: Expression): void;
    /**
     * Parse string into URL object.
     * @param uri Input string uri.
     */
    static parseUri(uri: string): ValueWithError;
    /**
     * Transform C# period and unit into js period and unit
     * @param duration C# duration
     * @param cSharpStr C# unit.
     */
    static timeUnitTransformer(duration: number, cSharpStr: string): {
        duration: number;
        tsStr: string;
    };
    /**
     * Format datetime.
     * @param timedata Input date time.
     * @param format Format flag.
     */
    static returnFormattedTimeStampStr(timedata: Moment, format: string): ValueWithError;
    /**
     * Equal helper function.
     * @param args Input args. Compare the first param and second param.
     */
    static isEqual(args: any[]): boolean;
    /**
     * Helper function of get the number of properties of an object.
     * @param obj An object.
     */
    private static getPropertyCount;
}
//# sourceMappingURL=functionUtils.internal.d.ts.map