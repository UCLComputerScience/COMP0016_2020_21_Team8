/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { LuisRecognizerInternal } from './luisRecognizerOptions';
import { LuisApplication, LuisRecognizerOptionsV2 } from './luisRecognizer';
import { TurnContext, RecognizerResult } from 'botbuilder-core';
/**
 * Validates if the options provided are valid [LuisRecognizerOptionsV2](xref:botbuilder-ai.LuisRecognizerOptionsV2).
 * @returns A boolean value that indicates param options is a [LuisRecognizerOptionsV2](xref:botbuilder-ai.LuisRecognizerOptionsV2).
 */
export declare function isLuisRecognizerOptionsV2(options: any): options is LuisRecognizerOptionsV2;
/**
 * Recognize intents in a user utterance using a configured LUIS model.
 */
export declare class LuisRecognizerV2 extends LuisRecognizerInternal {
    /**
     * Creates a new [LuisRecognizerV2](xref:botbuilder-ai.LuisRecognizerV2) instance.
     * @param application An object conforming to the [LuisApplication](xref:botbuilder-ai.LuisApplication) definition or a string representing a LUIS application endpoint, usually retrieved from https://luis.ai.
     * @param options Optional. Options object used to control predictions. Should conform to the [LuisRecognizerOptionsV2](xref:botbuilder-ai.LuisRecognizerOptionsV2) definition.
     */
    constructor(application: LuisApplication, options?: LuisRecognizerOptionsV2);
    options: LuisRecognizerOptionsV2;
    private luisClient;
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     * @param context The [TurnContext](xref:botbuilder-core.TurnContext).
     * @returns Analysis of utterance in form of [RecognizerResult](xref:botbuilder-core.RecognizerResult).
     */
    recognizeInternal(context: TurnContext): Promise<RecognizerResult>;
    /**
     * Remove role and ensure that dot and space are not a part of entity names since we want to do JSON paths.
     * @param name Value to be normalized.
     * @returns Normalized string value.
     */
    private normalizeName;
    /**
     * Get Intents from a LuisResult object.
     * @param luisResult Prediction, based on the input query, containing intent(s) and entities.
     * @returns LUIS Intents with a score number.
     */
    private getIntents;
    /**
     * @private
     */
    private getEntitiesAndMetadata;
    /**
     * @private
     */
    private populateCompositeEntity;
    /**
     * @private
     */
    private getEntityValue;
    /**
     * @private
     */
    private getEntityMetadata;
    /**
     * @private
     */
    private getNormalizedEntityName;
    /**
     * If a property doesn't exist add it to a new array, otherwise append it to the existing array
     * @param obj Object on which the property is to be set
     * @param key Property Key
     * @param value Property Value
     */
    private addProperty;
    /**
     * @private
     */
    private getSentiment;
    /**
     * @private
     */
    private getUserAgent;
    /**
     * @private
     */
    private emitTraceInfo;
}
//# sourceMappingURL=luisRecognizerOptionsV2.d.ts.map