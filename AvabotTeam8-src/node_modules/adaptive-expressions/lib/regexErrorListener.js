"use strict";
/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Error listener for Regex.
 */
// re-enable when this rule honors underscore prefix
/* eslint-disable @typescript-eslint/no-unused-vars */
class RegexErrorListener {
    /**
     * Upon syntax error, notify any interested parties.
     * @param _recognizer What parser got the error. From this object, you can access the context as well as the input stream.
     * @param _offendingSymbol Offending token in the input token stream, unless recognizer is a lexer, then it's null.
     * @param line Line number in the input where the error occurred.
     * @param charPositionInLine Character position within the line where the error occurred.
     * @param msg Message to emit.
     * @param _e Exception generated by the parser that led to the reporting of an error.
     */
    syntaxError(_recognizer, _offendingSymbol, _line, _charPositionInLine, _msg, _e) {
        throw Error(`Regular expression is invalid.`);
    }
}
RegexErrorListener.Instance = new RegexErrorListener();
exports.RegexErrorListener = RegexErrorListener;
//# sourceMappingURL=regexErrorListener.js.map