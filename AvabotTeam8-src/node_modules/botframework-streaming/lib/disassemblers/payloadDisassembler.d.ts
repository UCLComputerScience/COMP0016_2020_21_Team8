import { PayloadTypes } from '../payloads/payloadTypes';
import { PayloadSender } from '../payloadTransport/payloadSender';
import { IStreamWrapper } from '../interfaces/IStreamWrapper';
/**
 * Base class streaming payload disassembling.
 */
export declare abstract class PayloadDisassembler {
    abstract payloadType: PayloadTypes;
    private readonly sender;
    private stream;
    private streamLength?;
    private readonly id;
    /**
     * Initializes a new instance of the [PayloadDisassembler](xref:botframework-streaming.PayloadDisassembler) class.
     * @param sender The [PayloadSender](xref:botframework-streaming.PayloadSender) used to send the disassembled payload chunks.
     * @param id The ID of this disassembler.
     */
    constructor(sender: PayloadSender, id: string);
    /**
     * Serializes the item into the [IStreamWrapper](xref:botframework-streaming.IStreamWrapper) that exposes the stream and length of the result.
     * @param item The item to be serialized.
     */
    protected static serialize<T>(item: T): IStreamWrapper;
    /**
     * Gets the stream this disassembler is operating on.
     * @returns An [IStreamWrapper](xref:botframework-streaming.IStreamWrapper) with a Subscribable Stream.
     */
    abstract getStream(): Promise<IStreamWrapper>;
    /**
     * Begins the process of disassembling a payload and sending the resulting chunks to the [PayloadSender](xref:botframework-streaming.PayloadSender) to dispatch over the transport.
     */
    disassemble(): Promise<void>;
    /**
     * Begins the process of disassembling a payload and signals the [PayloadSender](xref:botframework-streaming.PayloadSender).
     */
    private send;
}
//# sourceMappingURL=payloadDisassembler.d.ts.map