/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ArrayExpression, BoolExpression, Expression, StringExpression } from 'adaptive-expressions';
import { Activity, RecognizerResult } from 'botbuilder-core';
import { Converter, ConverterFactory, DialogContext, Recognizer, RecognizerConfiguration } from 'botbuilder-dialogs';
import { LuisPredictionOptions, LuisRecognizerOptionsV3 } from './luisRecognizer';
export interface LuisAdaptiveRecognizerConfiguration extends RecognizerConfiguration {
    applicationId?: string | Expression | StringExpression;
    logPersonalInformation?: boolean | string | Expression | BoolExpression;
    dynamicLists?: unknown[] | string | Expression | ArrayExpression<unknown>;
    endpoint?: string | Expression | StringExpression;
    endpointKey?: string | Expression | StringExpression;
    predictionOptions?: LuisPredictionOptions;
}
/**
 * Class that represents an adaptive LUIS recognizer.
 */
export declare class LuisAdaptiveRecognizer extends Recognizer implements LuisAdaptiveRecognizerConfiguration {
    static $kind: string;
    /**
     * LUIS application ID.
     */
    applicationId: StringExpression;
    /**
     * The flag to indicate in personal information should be logged in telemetry.
     */
    logPersonalInformation: BoolExpression;
    /**
     * LUIS dynamic list.
     */
    dynamicLists: ArrayExpression<any>;
    /**
     * LUIS endpoint to query.
     * @remarks
     * For example: "https://westus.api.cognitive.microsoft.com"
     */
    endpoint: StringExpression;
    /**
     * Key used to talk to a LUIS endpoint.
     */
    endpointKey: StringExpression;
    /**
     * External entity recognizer.
     * @remarks
     * This recognizer is run before calling LUIS and the results are passed to LUIS.
     */
    /**
     * LUIS prediction options.
     */
    predictionOptions: LuisPredictionOptions;
    getConverter(property: keyof LuisAdaptiveRecognizerConfiguration): Converter | ConverterFactory;
    /**
     * To recognize intents and entities in a users utterance.
     * @param dialogContext The [DialogContext](xref:botbuilder-dialogs.DialogContext).
     * @param activity The [Activity](xref:botbuilder-core.Activity).
     * @param telemetryProperties Optional. Additional properties to be logged to telemetry with event.
     * @param telemetryMetrics Optional. Additional metrics to be logged to telemetry with event.
     */
    recognize(dialogContext: DialogContext, activity: Activity, telemetryProperties?: {
        [key: string]: string;
    }, telemetryMetrics?: {
        [key: string]: number;
    }): Promise<RecognizerResult>;
    /**
     * Construct V3 recognizer options from the current dialog context.
     * @param dialogContext Current dialog context.
     */
    recognizerOptions(dialogContext: DialogContext): LuisRecognizerOptionsV3;
    /**
     * Fills the event properties for LuisResult event for telemetry.
     * These properties are logged when the recognizer is called.
     * @param recognizerResult Last activity sent from user.
     * @param telemetryProperties Additional properties to be logged to telemetry with the LuisResult event.
     * @param dialogContext Dialog context.
     * @returns A dictionary that is sent as properties to BotTelemetryClient.trackEvent method for the LuisResult event.
     */
    protected fillRecognizerResultTelemetryProperties(recognizerResult: RecognizerResult, telemetryProperties: {
        [key: string]: string;
    }, dialogContext: DialogContext): {
        [key: string]: string;
    };
}
//# sourceMappingURL=luisAdaptiveRecognizer.d.ts.map