"use strict";
/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const expressionEvaluator_1 = require("../expressionEvaluator");
const expressionType_1 = require("../expressionType");
const functionUtils_1 = require("../functionUtils");
const returnType_1 = require("../returnType");
/**
 * Return a random integer from a specified range, which is inclusive only at the starting end.
 */
class Rand extends expressionEvaluator_1.ExpressionEvaluator {
    /**
     * Initializes a new instance of the [Rand](xref:adaptive-expressions.Rand) class.
     */
    constructor() {
        super(expressionType_1.ExpressionType.Rand, Rand.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateBinaryNumber);
    }
    /**
     * @private
     */
    static evaluator() {
        return functionUtils_1.FunctionUtils.applyWithError((args) => {
            let error;
            if (args[0] > args[1]) {
                error = `Min value ${args[0]} cannot be greater than max value ${args[1]}.`;
            }
            const value = Math.floor(Math.random() * (Number(args[1]) - Number(args[0])) + Number(args[0]));
            return { value, error };
        }, functionUtils_1.FunctionUtils.verifyInteger);
    }
}
exports.Rand = Rand;
//# sourceMappingURL=rand.js.map