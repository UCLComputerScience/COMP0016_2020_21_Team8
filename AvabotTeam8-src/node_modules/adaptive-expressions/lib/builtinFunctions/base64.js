"use strict";
/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const expressionEvaluator_1 = require("../expressionEvaluator");
const expressionType_1 = require("../expressionType");
const functionUtils_1 = require("../functionUtils");
const returnType_1 = require("../returnType");
/**
 * Return the base64-encoded version of a string or byte array.
 */
class Base64 extends expressionEvaluator_1.ExpressionEvaluator {
    /**
     * Initializes a new instance of the [Base64](xref:adaptive-expressions.Base64) class.
     */
    constructor() {
        super(expressionType_1.ExpressionType.Base64, Base64.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
    }
    /**
     * @private
     */
    static evaluator() {
        return functionUtils_1.FunctionUtils.apply((args) => {
            let result;
            if (typeof args[0] === 'string') {
                result = Buffer.from(args[0]).toString('base64');
            }
            if (args[0] instanceof Uint8Array) {
                result = Buffer.from(args[0]).toString('base64');
            }
            return result;
        });
    }
}
exports.Base64 = Base64;
//# sourceMappingURL=base64.js.map