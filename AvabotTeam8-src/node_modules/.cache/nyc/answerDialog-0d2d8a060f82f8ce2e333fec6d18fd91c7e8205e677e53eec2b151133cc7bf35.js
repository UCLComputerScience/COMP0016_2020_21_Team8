function cov_1qarz5kalb(){var path="/Users/doudou/COMP0016_2020_21_Team8/AvabotTeam8-src/dialogs/answerDialog.js";var hash="b173d19aa3341d7605511c228eb2a17cb37c6af6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/doudou/COMP0016_2020_21_Team8/AvabotTeam8-src/dialogs/answerDialog.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:33}},"1":{start:{line:6,column:21},end:{line:6,column:45}},"2":{start:{line:7,column:27},end:{line:7,column:48}},"3":{start:{line:8,column:24},end:{line:8,column:54}},"4":{start:{line:10,column:22},end:{line:10,column:37}},"5":{start:{line:11,column:25},end:{line:11,column:43}},"6":{start:{line:12,column:20},end:{line:12,column:33}},"7":{start:{line:21,column:4},end:{line:21,column:25}},"8":{start:{line:22,column:4},end:{line:33,column:5}},"9":{start:{line:24,column:6},end:{line:28,column:9}},"10":{start:{line:30,column:6},end:{line:32,column:8}},"11":{start:{line:35,column:4},end:{line:35,column:48}},"12":{start:{line:36,column:4},end:{line:41,column:6}},"13":{start:{line:43,column:4},end:{line:43,column:44}},"14":{start:{line:53,column:16},end:{line:55,column:110}},"15":{start:{line:57,column:24},end:{line:63,column:5}},"16":{start:{line:64,column:20},end:{line:64,column:69}},"17":{start:{line:67,column:4},end:{line:67,column:58}},"18":{start:{line:77,column:4},end:{line:79,column:5}},"19":{start:{line:78,column:6},end:{line:78,column:43}},"20":{start:{line:80,column:4},end:{line:80,column:37}},"21":{start:{line:81,column:4},end:{line:99,column:5}},"22":{start:{line:82,column:25},end:{line:82,column:76}},"23":{start:{line:83,column:16},end:{line:83,column:18}},"24":{start:{line:85,column:6},end:{line:92,column:7}},"25":{start:{line:86,column:8},end:{line:86,column:35}},"26":{start:{line:90,column:8},end:{line:91,column:155}},"27":{start:{line:94,column:6},end:{line:94,column:25}},"28":{start:{line:95,column:6},end:{line:97,column:8}},"29":{start:{line:98,column:6},end:{line:98,column:43}},"30":{start:{line:100,column:4},end:{line:102,column:7}},"31":{start:{line:110,column:4},end:{line:110,column:22}},"32":{start:{line:114,column:0},end:{line:114,column:43}},"33":{start:{line:115,column:0},end:{line:115,column:45}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:16},end:{line:44,column:3}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:31},end:{line:68,column:3}},line:52},"2":{name:"(anonymous_2)",decl:{start:{line:76,column:2},end:{line:76,column:3}},loc:{start:{line:76,column:32},end:{line:103,column:3}},line:76},"3":{name:"(anonymous_3)",decl:{start:{line:109,column:2},end:{line:109,column:3}},loc:{start:{line:109,column:11},end:{line:111,column:3}},line:109}},branchMap:{"0":{loc:{start:{line:53,column:16},end:{line:55,column:110}},type:"cond-expr",locations:[{start:{line:54,column:8},end:{line:54,column:38}},{start:{line:55,column:8},end:{line:55,column:110}}],line:53},"1":{loc:{start:{line:77,column:4},end:{line:79,column:5}},type:"if",locations:[{start:{line:77,column:4},end:{line:79,column:5}},{start:{line:77,column:4},end:{line:79,column:5}}],line:77},"2":{loc:{start:{line:85,column:6},end:{line:92,column:7}},type:"if",locations:[{start:{line:85,column:6},end:{line:92,column:7}},{start:{line:85,column:6},end:{line:92,column:7}}],line:85}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b173d19aa3341d7605511c228eb2a17cb37c6af6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1qarz5kalb=function(){return actualCoverage;};}return actualCoverage;}cov_1qarz5kalb();const{ComponentDialog,TextPrompt,WaterfallDialog}=(cov_1qarz5kalb().s[0]++,require("botbuilder-dialogs"));const{QnAMaker}=(cov_1qarz5kalb().s[1]++,require("botbuilder-ai"));const{MessageFactory}=(cov_1qarz5kalb().s[2]++,require("botbuilder"));const{ActionTypes}=(cov_1qarz5kalb().s[3]++,require("botframework-schema"));const ANSWER_DIALOG=(cov_1qarz5kalb().s[4]++,"ANSWER_DIALOG");const WATERFALL_DIALOG=(cov_1qarz5kalb().s[5]++,"WATERFALL_DIALOG");const TEXT_PROMPT=(cov_1qarz5kalb().s[6]++,"TEXT_PROMPT");/**
 * The dialog to do QnA with user
 * @class AnswerDialog
 * @extends {ComponentDialog}
 */class AnswerDialog extends ComponentDialog{constructor(){cov_1qarz5kalb().f[0]++;cov_1qarz5kalb().s[7]++;super(ANSWER_DIALOG);cov_1qarz5kalb().s[8]++;try{cov_1qarz5kalb().s[9]++;// create qnaMaker
this.qnaMaker=new QnAMaker({knowledgeBaseId:process.env.QnAKnowledgebaseId,endpointKey:process.env.QnAEndpointKey,host:process.env.QnAEndpointHostName});}catch(err){cov_1qarz5kalb().s[10]++;console.warn(`QnAMaker Exception: ${err} Check your QnAMaker configuration in .env`);}cov_1qarz5kalb().s[11]++;this.addDialog(new TextPrompt(TEXT_PROMPT));cov_1qarz5kalb().s[12]++;this.addDialog(new WaterfallDialog(WATERFALL_DIALOG,[this.beginStep.bind(this),this.answerStep.bind(this)]));cov_1qarz5kalb().s[13]++;this.initialDialogId=WATERFALL_DIALOG;}/**
   * A waterfall step to guide user when user enters the QnA mode or to answer the question user has asked if the dialog is restarted.
   * @param {*} stepContext
   * @return {*}
   * @memberof AnswerDialog
   */async beginStep(stepContext){cov_1qarz5kalb().f[1]++;const msg=(cov_1qarz5kalb().s[14]++,stepContext.options.restartMsg?(cov_1qarz5kalb().b[0][0]++,stepContext.options.restartMsg):(cov_1qarz5kalb().b[0][1]++,"Welcome! You can go on ask questions, or click `quit` to quit the QnA mode whenever feeling like so."));// user can quit QnA anytime by clicking `quit`
const cardActions=(cov_1qarz5kalb().s[15]++,[{type:ActionTypes.PostBack,title:"quit",value:"quit"}]);const message=(cov_1qarz5kalb().s[16]++,MessageFactory.suggestedActions(cardActions,msg));// Ask the user to enter their name.
cov_1qarz5kalb().s[17]++;return await stepContext.prompt(TEXT_PROMPT,message);}/**
   * A waterfall step to fetch answer from KB and send to user.
   * @param {*} stepContext
   * @return {*}
   * @memberof AnswerDialog
   */async answerStep(stepContext){cov_1qarz5kalb().f[2]++;cov_1qarz5kalb().s[18]++;if(stepContext.result=="quit"){cov_1qarz5kalb().b[1][0]++;cov_1qarz5kalb().s[19]++;return await stepContext.endDialog();}else{cov_1qarz5kalb().b[1][1]++;}cov_1qarz5kalb().s[20]++;console.log("Calling QnA Maker");cov_1qarz5kalb().s[21]++;try{const qnaResults=(cov_1qarz5kalb().s[22]++,await this.qnaMaker.getAnswers(stepContext.context));var msg=(cov_1qarz5kalb().s[23]++,"");// If an answer was received from QnA Maker, send the answer back to the user.
cov_1qarz5kalb().s[24]++;if(qnaResults[0]){cov_1qarz5kalb().b[2][0]++;cov_1qarz5kalb().s[25]++;msg=qnaResults[0].answer;// If no answers were returned from QnA Maker, reply with help.
}else{cov_1qarz5kalb().b[2][1]++;cov_1qarz5kalb().s[26]++;msg="Sorry, I haven't got this one. Please contact the administrator for feeding relevant material to my knowledge base at https://www.qnamaker.ai.";}}catch(error){cov_1qarz5kalb().s[27]++;console.log(error);cov_1qarz5kalb().s[28]++;await stepContext.context.sendActivity("Sorry, QnA maker is currently unavailable.");cov_1qarz5kalb().s[29]++;return await stepContext.endDialog();}cov_1qarz5kalb().s[30]++;return await stepContext.replaceDialog(this.initialDialogId,{restartMsg:msg});}/**
   * QnAMaker setter
   * @memberof AnswerDialog
   */set a(n){cov_1qarz5kalb().f[3]++;cov_1qarz5kalb().s[31]++;this.qnaMaker=n;}}cov_1qarz5kalb().s[32]++;module.exports.AnswerDialog=AnswerDialog;cov_1qarz5kalb().s[33]++;module.exports.ANSWER_DIALOG=ANSWER_DIALOG;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuc3dlckRpYWxvZy5qcyJdLCJuYW1lcyI6WyJDb21wb25lbnREaWFsb2ciLCJUZXh0UHJvbXB0IiwiV2F0ZXJmYWxsRGlhbG9nIiwicmVxdWlyZSIsIlFuQU1ha2VyIiwiTWVzc2FnZUZhY3RvcnkiLCJBY3Rpb25UeXBlcyIsIkFOU1dFUl9ESUFMT0ciLCJXQVRFUkZBTExfRElBTE9HIiwiVEVYVF9QUk9NUFQiLCJBbnN3ZXJEaWFsb2ciLCJjb25zdHJ1Y3RvciIsInFuYU1ha2VyIiwia25vd2xlZGdlQmFzZUlkIiwicHJvY2VzcyIsImVudiIsIlFuQUtub3dsZWRnZWJhc2VJZCIsImVuZHBvaW50S2V5IiwiUW5BRW5kcG9pbnRLZXkiLCJob3N0IiwiUW5BRW5kcG9pbnRIb3N0TmFtZSIsImVyciIsImNvbnNvbGUiLCJ3YXJuIiwiYWRkRGlhbG9nIiwiYmVnaW5TdGVwIiwiYmluZCIsImFuc3dlclN0ZXAiLCJpbml0aWFsRGlhbG9nSWQiLCJzdGVwQ29udGV4dCIsIm1zZyIsIm9wdGlvbnMiLCJyZXN0YXJ0TXNnIiwiY2FyZEFjdGlvbnMiLCJ0eXBlIiwiUG9zdEJhY2siLCJ0aXRsZSIsInZhbHVlIiwibWVzc2FnZSIsInN1Z2dlc3RlZEFjdGlvbnMiLCJwcm9tcHQiLCJyZXN1bHQiLCJlbmREaWFsb2ciLCJsb2ciLCJxbmFSZXN1bHRzIiwiZ2V0QW5zd2VycyIsImNvbnRleHQiLCJhbnN3ZXIiLCJlcnJvciIsInNlbmRBY3Rpdml0eSIsInJlcGxhY2VEaWFsb2ciLCJhIiwibiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJzNUhBZVk7MkZBZlosS0FBTSxDQUNKQSxlQURJLENBRUpDLFVBRkksQ0FHSkMsZUFISSwyQkFJRkMsT0FBTyxDQUFDLG9CQUFELENBSkwsQ0FBTixDQUtBLEtBQU0sQ0FBRUMsUUFBRiwyQkFBZUQsT0FBTyxDQUFDLGVBQUQsQ0FBdEIsQ0FBTixDQUNBLEtBQU0sQ0FBRUUsY0FBRiwyQkFBcUJGLE9BQU8sQ0FBQyxZ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QUQsQ0FBVixDQUFjRyxNQUFwQixDQUVBO0FBQ0QsQ0FKRCxJQUlPLHFEQUNMakIsR0FBRyxDQUNELGdKQURGLENBRUQsQ0FDRixDQUFDLE1BQU9rQixLQUFQLENBQWMsMEJBQ2QxQixPQUFPLENBQUNxQixHQUFSLENBQVlLLEtBQVosRUFEYyx5QkFFZCxLQUFNbkIsQ0FBQUEsV0FBVyxDQUFDaUIsT0FBWixDQUFvQkcsWUFBcEIsQ0FDSiw0Q0FESSxDQUFOLENBRmMseUJBS2QsTUFBTyxNQUFNcEIsQ0FBQUEsV0FBVyxDQUFDYSxTQUFaLEVBQWIsQ0FDRCxDQXZCMkIseUJBd0I1QixNQUFPLE1BQU1iLENBQUFBLFdBQVcsQ0FBQ3FCLGFBQVosQ0FBMEIsS0FBS3RCLGVBQS9CLENBQWdELENBQzNESSxVQUFVLENBQUVGLEdBRCtDLENBQWhELENBQWIsQ0FHRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBLEtBQ08sR0FBRHFCLENBQUFBLENBQUMsQ0FBQ0MsQ0FBRCxDQUFJLGtEQUNQLEtBQUt4QyxRQUFMLENBQWdCd0MsQ0FBaEIsQ0FDRCxDQTVGd0MsQyx5QkErRjNDQyxNQUFNLENBQUNDLE9BQVAsQ0FBZTVDLFlBQWYsQ0FBOEJBLFlBQTlCLEMseUJBQ0EyQyxNQUFNLENBQUNDLE9BQVAsQ0FBZS9DLGFBQWYsQ0FBK0JBLGFBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xyXG4gIENvbXBvbmVudERpYWxvZyxcclxuICBUZXh0UHJvbXB0LFxyXG4gIFdhdGVyZmFsbERpYWxvZyxcclxufSA9IHJlcXVpcmUoXCJib3RidWlsZGVyLWRpYWxvZ3NcIik7XHJcbmNvbnN0IHsgUW5BTWFrZXIgfSA9IHJlcXVpcmUoXCJib3RidWlsZGVyLWFpXCIpO1xyXG5jb25zdCB7IE1lc3NhZ2VGYWN0b3J5IH0gPSByZXF1aXJlKFwiYm90YnVpbGRlclwiKTtcclxuY29uc3QgeyBBY3Rpb25UeXBlcyB9ID0gcmVxdWlyZShcImJvdGZyYW1ld29yay1zY2hlbWFcIik7XHJcblxyXG5jb25zdCBBTlNXRVJfRElBTE9HID0gXCJBTlNXRVJfRElBTE9HXCI7XHJcbmNvbnN0IFdBVEVSRkFMTF9ESUFMT0cgPSBcIldBVEVSRkFMTF9ESUFMT0dcIjtcclxuY29uc3QgVEVYVF9QUk9NUFQgPSBcIlRFWFRfUFJPTVBUXCI7XHJcblxyXG4vKipcclxuICogVGhlIGRpYWxvZyB0byBkbyBRbkEgd2l0aCB1c2VyXHJcbiAqIEBjbGFzcyBBbnN3ZXJEaWFsb2dcclxuICogQGV4dGVuZHMge0NvbXBvbmVudERpYWxvZ31cclxuICovXHJcbmNsYXNzIEFuc3dlckRpYWxvZyBleHRlbmRzIENvbXBvbmVudERpYWxvZyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihBTlNXRVJfRElBTE9HKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIGNyZWF0ZSBxbmFNYWtlclxyXG4gICAgICB0aGlzLnFuYU1ha2VyID0gbmV3IFFuQU1ha2VyKHtcclxuICAgICAgICBrbm93bGVkZ2VCYXNlSWQ6IHByb2Nlc3MuZW52LlFuQUtub3dsZWRnZWJhc2VJZCxcclxuICAgICAgICBlbmRwb2ludEtleTogcHJvY2Vzcy5lbnYuUW5BRW5kcG9pbnRLZXksXHJcbiAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuUW5BRW5kcG9pbnRIb3N0TmFtZSxcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgIGBRbkFNYWtlciBFeGNlcHRpb246ICR7ZXJyfSBDaGVjayB5b3VyIFFuQU1ha2VyIGNvbmZpZ3VyYXRpb24gaW4gLmVudmBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFkZERpYWxvZyhuZXcgVGV4dFByb21wdChURVhUX1BST01QVCkpO1xyXG4gICAgdGhpcy5hZGREaWFsb2coXHJcbiAgICAgIG5ldyBXYXRlcmZhbGxEaWFsb2coV0FURVJGQUxMX0RJQUxPRywgW1xyXG4gICAgICAgIHRoaXMuYmVnaW5TdGVwLmJpbmQodGhpcyksXHJcbiAgICAgICAgdGhpcy5hbnN3ZXJTdGVwLmJpbmQodGhpcyksXHJcbiAgICAgIF0pXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuaW5pdGlhbERpYWxvZ0lkID0gV0FURVJGQUxMX0RJQUxPRztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgd2F0ZXJmYWxsIHN0ZXAgdG8gZ3VpZGUgdXNlciB3aGVuIHVzZXIgZW50ZXJzIHRoZSBRbkEgbW9kZSBvciB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uIHVzZXIgaGFzIGFza2VkIGlmIHRoZSBkaWFsb2cgaXMgcmVzdGFydGVkLlxyXG4gICAqIEBwYXJhbSB7Kn0gc3RlcENvbnRleHRcclxuICAgKiBAcmV0dXJuIHsqfVxyXG4gICAqIEBtZW1iZXJvZiBBbnN3ZXJEaWFsb2dcclxuICAgKi9cclxuICBhc3luYyBiZWdpblN0ZXAoc3RlcENvbnRleHQpIHtcclxuICAgIGNvbnN0IG1zZyA9IHN0ZXBDb250ZXh0Lm9wdGlvbnMucmVzdGFydE1zZ1xyXG4gICAgICA/IHN0ZXBDb250ZXh0Lm9wdGlvbnMucmVzdGFydE1zZ1xyXG4gICAgICA6IFwiV2VsY29tZSEgWW91IGNhbiBnbyBvbiBhc2sgcXVlc3Rpb25zLCBvciBjbGljayBgcXVpdGAgdG8gcXVpdCB0aGUgUW5BIG1vZGUgd2hlbmV2ZXIgZmVlbGluZyBsaWtlIHNvLlwiO1xyXG4gICAgLy8gdXNlciBjYW4gcXVpdCBRbkEgYW55dGltZSBieSBjbGlja2luZyBgcXVpdGBcclxuICAgIGNvbnN0IGNhcmRBY3Rpb25zID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUG9zdEJhY2ssXHJcbiAgICAgICAgdGl0bGU6IFwicXVpdFwiLFxyXG4gICAgICAgIHZhbHVlOiBcInF1aXRcIixcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgICBjb25zdCBtZXNzYWdlID0gTWVzc2FnZUZhY3Rvcnkuc3VnZ2VzdGVkQWN0aW9ucyhjYXJkQWN0aW9ucywgbXNnKTtcclxuXHJcbiAgICAvLyBBc2sgdGhlIHVzZXIgdG8gZW50ZXIgdGhlaXIgbmFtZS5cclxuICAgIHJldHVybiBhd2FpdCBzdGVwQ29udGV4dC5wcm9tcHQoVEVYVF9QUk9NUFQsIG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQSB3YXRlcmZhbGwgc3RlcCB0byBmZXRjaCBhbnN3ZXIgZnJvbSBLQiBhbmQgc2VuZCB0byB1c2VyLlxyXG4gICAqIEBwYXJhbSB7Kn0gc3RlcENvbnRleHRcclxuICAgKiBAcmV0dXJuIHsqfVxyXG4gICAqIEBtZW1iZXJvZiBBbnN3ZXJEaWFsb2dcclxuICAgKi9cclxuICBhc3luYyBhbnN3ZXJTdGVwKHN0ZXBDb250ZXh0KSB7XHJcbiAgICBpZiAoc3RlcENvbnRleHQucmVzdWx0ID09IFwicXVpdFwiKSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBzdGVwQ29udGV4dC5lbmREaWFsb2coKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKFwiQ2FsbGluZyBRbkEgTWFrZXJcIik7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBxbmFSZXN1bHRzID0gYXdhaXQgdGhpcy5xbmFNYWtlci5nZXRBbnN3ZXJzKHN0ZXBDb250ZXh0LmNvbnRleHQpO1xyXG4gICAgICB2YXIgbXNnID0gXCJcIjtcclxuICAgICAgLy8gSWYgYW4gYW5zd2VyIHdhcyByZWNlaXZlZCBmcm9tIFFuQSBNYWtlciwgc2VuZCB0aGUgYW5zd2VyIGJhY2sgdG8gdGhlIHVzZXIuXHJcbiAgICAgIGlmIChxbmFSZXN1bHRzWzBdKSB7XHJcbiAgICAgICAgbXNnID0gcW5hUmVzdWx0c1swXS5hbnN3ZXI7XHJcblxyXG4gICAgICAgIC8vIElmIG5vIGFuc3dlcnMgd2VyZSByZXR1cm5lZCBmcm9tIFFuQSBNYWtlciwgcmVwbHkgd2l0aCBoZWxwLlxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1zZyA9XHJcbiAgICAgICAgICBcIlNvcnJ5LCBJIGhhdmVuJ3QgZ290IHRoaXMgb25lLiBQbGVhc2UgY29udGFjdCB0aGUgYWRtaW5pc3RyYXRvciBmb3IgZmVlZGluZyByZWxldmFudCBtYXRlcmlhbCB0byBteSBrbm93bGVkZ2UgYmFzZSBhdCBodHRwczovL3d3dy5xbmFtYWtlci5haS5cIjtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICBhd2FpdCBzdGVwQ29udGV4dC5jb250ZXh0LnNlbmRBY3Rpdml0eShcclxuICAgICAgICBcIlNvcnJ5LCBRbkEgbWFrZXIgaXMgY3VycmVudGx5IHVuYXZhaWxhYmxlLlwiXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBhd2FpdCBzdGVwQ29udGV4dC5lbmREaWFsb2coKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhd2FpdCBzdGVwQ29udGV4dC5yZXBsYWNlRGlhbG9nKHRoaXMuaW5pdGlhbERpYWxvZ0lkLCB7XHJcbiAgICAgIHJlc3RhcnRNc2c6IG1zZyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUW5BTWFrZXIgc2V0dGVyXHJcbiAgICogQG1lbWJlcm9mIEFuc3dlckRpYWxvZ1xyXG4gICAqL1xyXG4gIHNldCBhKG4pIHtcclxuICAgIHRoaXMucW5hTWFrZXIgPSBuO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMuQW5zd2VyRGlhbG9nID0gQW5zd2VyRGlhbG9nO1xyXG5tb2R1bGUuZXhwb3J0cy5BTlNXRVJfRElBTE9HID0gQU5TV0VSX0RJQUxPRztcclxuIl19