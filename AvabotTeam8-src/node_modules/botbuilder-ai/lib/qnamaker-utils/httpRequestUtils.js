"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const pjson = require('../../package.json');
const globals_1 = require("../globals");
const fetch = globals_1.getFetch();
/**
 * Http request utils class.
 *
 * @remarks
 * This class is helper class for all the http request operations.
 */
class HttpRequestUtils {
    /**
     * Execute Http request.
     *
     * @param requestUrl Http request url.
     * @param payloadBody Http request body.
     * @param endpoint QnA Maker endpoint details.
     * @param timeout (Optional)Timeout for http call
     */
    executeHttpRequest(requestUrl, payloadBody, endpoint, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!requestUrl) {
                throw new TypeError('Request url cannot be null.');
            }
            if (!payloadBody) {
                throw new TypeError('Payload body cannot be null.');
            }
            if (!endpoint) {
                throw new TypeError('Payload body cannot be null.');
            }
            const headers = this.getHeaders(endpoint);
            const qnaResult = yield fetch(requestUrl, {
                method: 'POST',
                headers: headers,
                timeout: timeout,
                body: payloadBody,
            });
            return qnaResult.status == 204 ? this.getSuccessful204Result() : yield qnaResult.json();
        });
    }
    /**
     * Sets headers for request to QnAMaker service.
     *
     * The [QnAMakerEndpointKey](#QnAMakerEndpoint.QnAMakerEndpointKey) is set as the value of
     * `Authorization` header for v4.0 and later of QnAMaker service.
     *
     * Legacy QnAMaker services use the `Ocp-Apim-Subscription-Key` header for the QnAMakerEndpoint value instead.
     *
     * [QnAMaker.getHeaders()](#QnAMaker.getHeaders) also gets the User-Agent header value.
     */
    getHeaders(endpoint) {
        const headers = {};
        headers['Ocp-Apim-Subscription-Key'] = endpoint.endpointKey;
        headers.Authorization = `EndpointKey ${endpoint.endpointKey}`;
        headers['User-Agent'] = this.getUserAgent();
        headers['Content-Type'] = 'application/json';
        return headers;
    }
    /**
     * @private
     */
    getUserAgent() {
        const packageUserAgent = `${pjson.name}/${pjson.version}`;
        const platformUserAgent = `(${os.arch()}-${os.type()}-${os.release()}; Node.js,Version=${process.version})`;
        return `${packageUserAgent} ${platformUserAgent}`;
    }
    /**
     * Creates a QnAMakerResult for successful responses from QnA Maker service that return status code 204 No-Content.
     *
     * The [Train API](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/qnamakerruntime/runtime/train)
     * is an example of one of QnA Maker's APIs that return a 204 status code.
     */
    getSuccessful204Result() {
        return {
            questions: [],
            answer: '204 No-Content',
            score: 100,
            id: -1,
            source: null,
            metadata: [],
        };
    }
}
exports.HttpRequestUtils = HttpRequestUtils;
//# sourceMappingURL=httpRequestUtils.js.map