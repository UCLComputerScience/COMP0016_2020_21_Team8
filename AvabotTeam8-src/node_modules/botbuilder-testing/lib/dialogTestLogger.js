"use strict";
/**
 * @module botbuilder-testing
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const botbuilder_core_1 = require("botbuilder-core");
/**
 * Log a transcript of messages from a dialog to the console, along with additional diagnostic information.
 * For use with the `DialogTestClient` class.
 *
 * Example:
 * ```javascript
 * let client = new DialogTestClient(DIALOG, OPTIONS, [new DialogTestLogger()]);
 * ```
 */
class DialogTestLogger {
    /**
     * Initializes a new instance of the [DialogTestLogger](xref:botbuilder-testing.DialogTestLogger) class.
     * @param logger A logger object with a `log` function.
     */
    constructor(logger) {
        this._stopwatchStateKey = Symbol('stopwatch');
        this._logger = logger ? logger : console;
    }
    /**
     * Called each time the bot receives a new request.
     * @param context [TurnContext](xref:botbuilder-core.TurnContext) for current turn of conversation with the user.
     * @param next Function to call to continue execution to the next step in the middleware chain.
     * @returns A `Promise` that represents the work queued to execute.
     */
    onTurn(context, next) {
        return __awaiter(this, void 0, void 0, function* () {
            // log incoming
            if (context.activity.type == botbuilder_core_1.ActivityTypes.Message) {
                this._logger.log(`User: Text = ${context.activity.text}`);
            }
            else {
                this._logger.log(`User: Activity = ${context.activity.type}`);
                JSON.stringify(context.activity, null, 2)
                    .split(/\n/)
                    .forEach((line) => {
                    this._logger.log(line);
                });
            }
            const now = new Date();
            context.turnState[this._stopwatchStateKey] = now;
            const timestamp = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
            this._logger.log(`-> ts: ${timestamp}`);
            context.onSendActivities((context, activities, next) => __awaiter(this, void 0, void 0, function* () {
                // log outgoing
                activities.forEach((activity) => {
                    if (activity.type == botbuilder_core_1.ActivityTypes.Message) {
                        this._logger.log(`Bot: Text      = ${activity.text}`);
                        this._logger.log(`     Speak     = ${activity.speak}`);
                        this._logger.log(`     InputHint = ${activity.inputHint}`);
                    }
                    else {
                        this._logger.log(`Bot: Activity = ${activity.type}`);
                        JSON.stringify(activity, null, 2)
                            .split(/\n/)
                            .forEach((line) => {
                            this._logger.log(line);
                        });
                    }
                });
                const now = new Date();
                const stopwatch = context.turnState[this._stopwatchStateKey];
                const mms = now.getTime() - stopwatch.getTime();
                const timestamp = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
                this._logger.log(`-> ts: ${timestamp} elapsed ${mms} ms`);
                return next();
            }));
            yield next();
        });
    }
}
exports.DialogTestLogger = DialogTestLogger;
//# sourceMappingURL=dialogTestLogger.js.map