"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const httpRequestUtils_1 = require("./httpRequestUtils");
/**
 * Generate Answer api utils class.
 *
 * @remarks
 * This class is helper class for generate answer api, which is used to make queries to a single QnA Maker knowledge base and return the result.
 */
class TrainUtils {
    /**
     * Creates new instance for active learning train utils.
     * @param endpoint The endpoint of the knowledge base to query.
     */
    constructor(endpoint) {
        this.endpoint = endpoint;
        this.httpRequestUtils = new httpRequestUtils_1.HttpRequestUtils();
    }
    /**
     * Train API to provide feedback.
     * @param feedbackRecords Feedback record list.
     */
    callTrain(feedbackRecords) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!feedbackRecords) {
                throw new TypeError('Feedback records can not be null.');
            }
            if (!feedbackRecords.feedbackRecords || feedbackRecords.feedbackRecords.length == 0) {
                return;
            }
            yield this.queryTrain(feedbackRecords);
        });
    }
    /**
     * @private
     */
    queryTrain(feedbackRecords) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint.host}/knowledgebases/${this.endpoint.knowledgeBaseId}/train`;
            const payloadBody = JSON.stringify({
                feedbackRecords: feedbackRecords.feedbackRecords,
            });
            yield this.httpRequestUtils.executeHttpRequest(url, payloadBody, this.endpoint);
        });
    }
}
exports.TrainUtils = TrainUtils;
//# sourceMappingURL=trainUtils.js.map