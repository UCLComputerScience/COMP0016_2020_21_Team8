"use strict";
/**
 * @module botframework-connector
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const appCredentials_1 = require("./appCredentials");
/**
 * MicrosoftAppCredentials auth implementation
 */
class MicrosoftAppCredentials extends appCredentials_1.AppCredentials {
    /**
     * Initializes a new instance of the [MicrosoftAppCredentials](xref:botframework-connector.MicrosoftAppCredentials) class.
     * @param appId The Microsoft app ID.
     * @param appPassword The Microsoft app password.
     * @param channelAuthTenant Optional. The oauth token tenant.
     * @param oAuthScope Optional. The scope for the token.
     */
    constructor(appId, appPassword, channelAuthTenant, oAuthScope) {
        super(appId, channelAuthTenant, oAuthScope);
        this.appPassword = appPassword;
    }
    /**
     * @protected
     */
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.refreshingToken) {
                this.refreshingToken = new Promise((resolve, reject) => {
                    this.authenticationContext.acquireTokenWithClientCredentials(this.oAuthScope, this.appId, this.appPassword, function (err, tokenResponse) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(tokenResponse);
                        }
                    });
                });
            }
            return this.refreshingToken;
        });
    }
}
exports.MicrosoftAppCredentials = MicrosoftAppCredentials;
//# sourceMappingURL=microsoftAppCredentials.js.map