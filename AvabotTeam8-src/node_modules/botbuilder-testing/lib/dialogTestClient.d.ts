/**
 * @module botbuilder-testing
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, TestAdapter, Middleware, ConversationState } from 'botbuilder-core';
import { Dialog, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
/**
 * A client for testing dialogs in isolation.
 */
export declare class DialogTestClient {
    private readonly _callback;
    private _dialogContext;
    private readonly _testAdapter;
    /**
     * A DialogTurnResult instance with the result of the last turn.
     */
    dialogTurnResult: DialogTurnResult;
    /**
     * A ConversationState instance for the current test client.
     */
    conversationState: ConversationState;
    /**
     * Creates a [DialogTestClient](xref:botbuilder-testing.DialogTestClient) to test a [Dialog](xref:botbuilder-dialogs.Dialog) without having to create a full-fledged adapter.
     * ```javascript
     * let client = new DialogTestClient('test', MY_DIALOG, MY_OPTIONS);
     * let reply = await client.sendActivity('first message');
     * assert.strictEqual(reply.text, 'first reply', 'reply failed');
     * ```
     * @param channelId The `channelId` to be used for the test.
     * Use 'emulator' or 'test' if you are uncertain of the channel you are targeting.
     * Otherwise, it is recommended that you use the id for the channel(s) your bot will be using and write a test case for each channel.
     * @param targetDialog The [Dialog](xref:botbuilder-dialogs.Dialog) to be tested. This will be the root dialog for the test client.
     * @param initialDialogOptions Optional. Additional argument(s) to pass to the [Dialog](xref:botbuilder-dialogs.Dialog) being started.
     * @param middlewares Optional. A [Middleware](xref:botbuilder-core.Middleware) list to be added to the test adapter.
     * @param conversationState Optional. A [ConversationState](xref:botbuilder-core.ConversationState) instance to use in the test client.
     */
    constructor(channelId: string, targetDialog: Dialog, initialDialogOptions?: any, middlewares?: Middleware[], conversationState?: ConversationState);
    /**
     * Creates a [DialogTestClient](xref:botbuilder-testing.DialogTestClient) to test a [Dialog](xref:botbuilder-dialogs.Dialog) without having to create a full-fledged adapter.
     * ```javascript
     * let client = new DialogTestClient(MY_DIALOG, MY_OPTIONS);
     * let reply = await client.sendActivity('first message');
     * assert.strictEqual(reply.text, 'first reply', 'reply failed');
     * ```
     * @param testAdapter The [TestAdapter](xref:botbuilder-core.TestAdapter) to use.
     * @param targetDialog The [Dialog](xref:botbuilder-dialogs.Dialog) to be tested. This will be the root dialog for the test client.
     * @param initialDialogOptions Optional. Additional argument(s) to pass to the [Dialog](xref:botbuilder-dialogs.Dialog) being started.
     * @param middlewares Optional. A [Middleware](xref:botbuilder-core.Middleware) list to be added to the test adapter.
     * @param conversationState Optional. A [ConversationState](xref:botbuilder-core.ConversationState) instance to use in the test client.
     */
    constructor(testAdapter: TestAdapter, targetDialog: Dialog, initialDialogOptions?: any, middlewares?: Middleware[], conversationState?: ConversationState);
    /**
     * Gets a reference for the DialogContext.
     * @remarks
     * This property will be null until at least one activity is sent to DialogTestClient.
     */
    readonly dialogContext: DialogContext;
    /**
     * Send an activity into the dialog.
     * @returns a TestFlow that can be used to assert replies etc
     * @param activity an activity potentially with text
     *
     * ```javascript
     * DialogTest.send('hello').assertReply('hello yourself').then(done);
     * ```
     */
    sendActivity(activity: Partial<Activity> | string): Promise<any>;
    /**
     * Get the next reply waiting to be delivered (if one exists)
     */
    getNextReply(): Partial<Activity>;
    /**
     * @private
     */
    private getDefaultCallback;
    /**
     * @private
     */
    private addUserMiddlewares;
}
//# sourceMappingURL=dialogTestClient.d.ts.map