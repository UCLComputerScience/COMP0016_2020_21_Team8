"use strict";
/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const expressionEvaluator_1 = require("../expressionEvaluator");
const expressionType_1 = require("../expressionType");
const functionUtils_1 = require("../functionUtils");
const returnType_1 = require("../returnType");
/**
 * Merge two JSON objects into one JSON object.
 */
class Merge extends expressionEvaluator_1.ExpressionEvaluator {
    /**
     * Initializes a new instance of the [Merge](xref:adaptive-expressions.Merge) class.
     */
    constructor() {
        super(expressionType_1.ExpressionType.Merge, Merge.evaluator(), returnType_1.ReturnType.Object, Merge.validator);
    }
    /**
     * @private
     */
    static evaluator() {
        return functionUtils_1.FunctionUtils.applySequenceWithError((args) => {
            let value;
            let error;
            if (typeof args[0] === 'object' &&
                !Array.isArray(args[0]) &&
                typeof args[1] === 'object' &&
                !Array.isArray(args[1])) {
                Object.assign(args[0], args[1]);
                value = args[0];
            }
            else {
                error = `The argumets ${args[0]} and ${args[1]} must be JSON objects.`;
            }
            return { value, error };
        });
    }
    /**
     * @private
     */
    static validator(expression) {
        functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, Number.MAX_SAFE_INTEGER);
    }
}
exports.Merge = Merge;
//# sourceMappingURL=merge.js.map