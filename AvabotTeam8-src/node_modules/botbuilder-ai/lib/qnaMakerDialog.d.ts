/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ArrayExpression, BoolExpression, EnumExpression, Expression, IntExpression, NumberExpression, StringExpression } from 'adaptive-expressions';
import { Activity } from 'botbuilder-core';
import { Converter, ConverterFactory, WaterfallDialog, DialogConfiguration, DialogContext, DialogStateManager, DialogTurnResult, TemplateInterface } from 'botbuilder-dialogs';
import { QnAMakerOptions } from './qnamaker-interfaces/qnamakerOptions';
import { RankerTypes } from './qnamaker-interfaces/rankerTypes';
import { JoinOperator } from './qnamaker-interfaces/joinOperator';
import { QnAMakerMetadata } from './qnamaker-interfaces';
/**
 * QnAMakerDialog response options.
 */
export interface QnAMakerDialogResponseOptions {
    /**
     * Title for active learning card.
     */
    activeLearningCardTitle: string;
    /**
     * Text shown for 'no match' option on active learning card.
     */
    cardNoMatchText: string;
    /**
     * Activity to be sent in the event of no answer found in KB.
     */
    noAnswer: Partial<Activity>;
    /**
     * Activity to be sent in the end that the 'no match' option is selected on active learning card.
     */
    cardNoMatchResponse: Partial<Activity>;
}
/**
 * Options for QnAMakerDialog.
 */
export interface QnAMakerDialogOptions {
    /**
     * Options for QnAMaker knowledgebase.
     */
    qnaMakerOptions: QnAMakerOptions;
    /**
     * QnAMakerDialog response options.
     */
    qnaDialogResponseOptions: QnAMakerDialogResponseOptions;
}
export interface QnAMakerDialogConfiguration extends DialogConfiguration {
    knowledgeBaseId?: string | Expression | StringExpression;
    hostname?: string | Expression | StringExpression;
    endpointKey?: string | Expression | StringExpression;
    threshold?: number | string | Expression | NumberExpression;
    top?: number | string | Expression | IntExpression;
    noAnswer?: string | Partial<Activity> | TemplateInterface<Partial<Activity>, DialogStateManager>;
    activeLearningCardTitle?: string | Expression | StringExpression;
    cardNoMatchText?: string | Expression | StringExpression;
    cardNoMatchResponse?: string | Partial<Activity> | TemplateInterface<Partial<Activity>, DialogStateManager>;
    strictFilters?: QnAMakerMetadata[] | string | Expression | ArrayExpression<QnAMakerMetadata>;
    logPersonalInformation?: boolean | string | Expression | BoolExpression;
    isTest?: boolean;
    rankerType?: RankerTypes | string | Expression | EnumExpression<RankerTypes>;
}
/**
 * A dialog that supports multi-step and adaptive-learning QnA Maker services.
 *
 * @remarks
 * An instance of this class targets a specific QnA Maker knowledge base.
 * It supports knowledge bases that include follow-up prompt and active learning features.
 * The dialog will also present user with appropriate multi-turn prompt or active learning options.
 */
export declare class QnAMakerDialog extends WaterfallDialog implements QnAMakerDialogConfiguration {
    static $kind: string;
    /**
     * Log personal information flag.
     *
     * @remarks
     * Defauls to a value of `=settings.logPersonalInformation`, which retrieves
     * `logPersonalInformation` flag from settings.
     */
    logPersonalInformation: BoolExpression;
    /**
     * The path for storing and retrieving QnA Maker context data.
     *
     * @remarks
     * This represents context about the current or previous call to QnA Maker.
     * It is stored within the current step's [WaterfallStepContext](xref:botbuilder-dialogs.WaterfallStepContext).
     * It supports QnA Maker's follow-up prompt and active learning features.
     */
    private qnAContextData;
    /**
     * The path for storing and retrieving the previous question ID.
     *
     * @remarks
     * This represents the QnA question ID from the previous turn.
     * It is stored within the current step's [WaterfallStepContext](xref:botbuilder-dialogs.WaterfallStepContext).
     * It supports QnA Maker's follow-up prompt and active learning features.
     */
    private previousQnAId;
    /**
     * The path for storing and retrieving the options for this instance of the dialog.
     *
     * @remarks
     * This includes the options with which the dialog was started and options expected by the QnA Maker service.
     * It is stored within the current step's [WaterfallStepContext](xref:botbuilder-dialogs.WaterfallStepContext).
     * It supports QnA Maker and the dialog system.
     */
    private options;
    private qnAData;
    private currentQuery;
    private defaultCardNoMatchResponse;
    private defaultNoAnswer;
    knowledgeBaseId: StringExpression;
    hostname: StringExpression;
    endpointKey: StringExpression;
    threshold: NumberExpression;
    top: IntExpression;
    noAnswer: TemplateInterface<Partial<Activity>, DialogStateManager>;
    activeLearningCardTitle: StringExpression;
    cardNoMatchText: StringExpression;
    cardNoMatchResponse: TemplateInterface<Partial<Activity>, DialogStateManager>;
    strictFilters: ArrayExpression<QnAMakerMetadata>;
    isTest: boolean;
    rankerType: EnumExpression<RankerTypes>;
    private strictFiltersJoinOperator;
    /**
     * Initializes a new instance of the [QnAMakerDialog](xref:QnAMakerDialog) class.
     * @param knowledgeBaseId The ID of the QnA Maker knowledge base to query.
     * @param endpointKey The QnA Maker endpoint key to use to query the knowledge base.
     * @param hostName The QnA Maker host URL for the knowledge base, starting with "https://" and ending with "/qnamaker".
     * @param noAnswer (Optional) The activity to send the user when QnA Maker does not find an answer.
     * @param threshold (Optional) The threshold above which to treat answers found from the knowledgebase as a match.
     * @param activeLearningCardTitle (Optional) The card title to use when showing active learning options to the user, if active learning is enabled.
     * @param cardNoMatchText (Optional) The button text to use with active learning options, allowing a user to indicate none of the options are applicable.
     * @param top (Optional) Maximum number of answers to return from the knowledge base.
     * @param cardNoMatchResponse (Optional) The activity to send the user if they select the no match option on an active learning card.
     * @param strictFilters (Optional) QnA Maker metadata with which to filter or boost queries to the knowledge base; or null to apply none.
     * @param dialogId (Optional) Id of the created dialog. Default is 'QnAMakerDialog'.
     */
    constructor(knowledgeBaseId?: string, endpointKey?: string, hostname?: string, noAnswer?: Activity, threshold?: number, activeLearningCardTitle?: string, cardNoMatchText?: string, top?: number, cardNoMatchResponse?: Activity, strictFilters?: QnAMakerMetadata[], dialogId?: string, strictFiltersJoinOperator?: JoinOperator);
    getConverter(property: keyof QnAMakerDialogConfiguration): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @remarks
     * If the task is successful, the result indicates whether the dialog is still
     * active after the turn has been processed by the dialog.
     *
     * You can use the [options](#options) parameter to include the QnA Maker context data,
     * which represents context from the previous query. To do so, the value should include a
     * `context` property of type [QnAResponseContext](#QnAResponseContext).
     *
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options (Optional) Initial information to pass to the dialog.
     */
    beginDialog(dc: DialogContext, options?: object): Promise<DialogTurnResult>;
    /**
     * Gets the options for the QnA Maker client that the dialog will use to query the knowledge base.
     * @param dc The dialog context for the current turn of conversation.
     * @remarks If the task is successful, the result contains the QnA Maker options to use.
     * @returns A new instance of QnAMakerOptions.
     */
    private getQnAMakerOptions;
    /**
     * Gets the options the dialog will use to display query results to the user.
     * @param dc The dialog context for the current turn of conversation.
     * @remarks If the task is successful, the result contains the response options to use.
     * @returns A new instance of QnAMakerDialogResponseOptions.
     */
    private getQnAResponseOptions;
    /**
     * Queries the knowledgebase and either passes result to the next step or constructs and displays an active learning card
     * if active learning is enabled and multiple score close answers are returned.
     **/
    private callGenerateAnswer;
    /**
     * If active learning options were displayed in the previous step and the user has selected an option other
     * than 'no match' then the training API is called, passing the user's chosen question back to the knowledgebase.
     * If no active learning options were displayed in the previous step, the incoming result is immediately passed to the next step.
     **/
    private callTrain;
    /**
     * If multi turn prompts are included with the answer returned from the knowledgebase, this step constructs
     * and sends an activity with a hero card displaying the answer and the multi turn prompt options.
     * If no multi turn prompts exist then the result incoming result is passed to the next step.
     **/
    private checkForMultiTurnPrompt;
    /**
     * Displays an appropriate response based on the incoming result to the user.If an answer has been identified it
     * is sent to the user. Alternatively, if no answer has been identified or the user has indicated 'no match' on an
     * active learning card, then an appropriate message is sent to the user.
     **/
    private displayQnAResult;
    /**
     * Creates and returns an instance of the QnAMaker class used to query the knowledgebase.
     **/
    private getQnAClient;
    /**
     * Gets unmodified v5 API hostName or constructs v4 API hostName
     * @remarks
     * Example of a complete v5 API endpoint: "https://qnamaker-acom.azure.com/qnamaker/v5.0"
     * Template literal to construct v4 API endpoint: `https://${ this.hostName }.azurewebsites.net/qnamaker`
     */
    private getHost;
}
//# sourceMappingURL=qnaMakerDialog.d.ts.map