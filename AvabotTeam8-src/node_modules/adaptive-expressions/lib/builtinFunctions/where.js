"use strict";
/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const expressionEvaluator_1 = require("../expressionEvaluator");
const expressionType_1 = require("../expressionType");
const functionUtils_internal_1 = require("../functionUtils.internal");
const simpleObjectMemory_1 = require("../memory/simpleObjectMemory");
const stackedMemory_1 = require("../memory/stackedMemory");
const options_1 = require("../options");
const returnType_1 = require("../returnType");
/**
 * Filter on each element and return the new collection of filtered elements which match a specific condition.
 */
class Where extends expressionEvaluator_1.ExpressionEvaluator {
    /**
     * Initializes a new instance of the [Where](xref:adaptive-expressions.Where) class.
     */
    constructor() {
        super(expressionType_1.ExpressionType.Where, Where.evaluator, returnType_1.ReturnType.Array, functionUtils_internal_1.InternalFunctionUtils.validateForeach);
    }
    /**
     * @private
     */
    static evaluator(expression, state, options) {
        let result;
        const { value: instance, error: childrenError } = expression.children[0].tryEvaluate(state, options);
        let error = childrenError;
        if (!error) {
            const iteratorName = expression.children[1].children[0].value;
            let arr = [];
            let isInstanceArray = false;
            if (Array.isArray(instance)) {
                arr = instance;
                isInstanceArray = true;
            }
            else if (typeof instance === 'object') {
                Object.keys(instance).forEach((u) => arr.push({ key: u, value: instance[u] }));
            }
            else {
                error = `${expression.children[0]} is not a collection or structure object to run foreach`;
            }
            if (!error) {
                const stackedMemory = stackedMemory_1.StackedMemory.wrap(state);
                const arrResult = [];
                for (const item of arr) {
                    const local = new Map([[iteratorName, item]]);
                    stackedMemory.push(simpleObjectMemory_1.SimpleObjectMemory.wrap(local));
                    const newOptions = new options_1.Options(options);
                    newOptions.nullSubstitution = undefined;
                    const { value: r, error: e } = expression.children[2].tryEvaluate(stackedMemory, newOptions);
                    stackedMemory.pop();
                    if (e !== undefined) {
                        return { value: undefined, error: e };
                    }
                    if (r) {
                        arrResult.push(local.get(iteratorName));
                    }
                }
                //reconstruct object if instance is object, otherwise, return array result
                if (!isInstanceArray) {
                    const objResult = {};
                    for (const item of arrResult) {
                        objResult[item.key] = item.value;
                    }
                    result = objResult;
                }
                else {
                    result = arrResult;
                }
            }
        }
        return { value: result, error };
    }
}
exports.Where = Where;
//# sourceMappingURL=where.js.map