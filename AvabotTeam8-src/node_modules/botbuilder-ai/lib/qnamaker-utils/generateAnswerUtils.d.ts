/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from 'botbuilder-core';
import { QnAMakerResult } from '../qnamaker-interfaces/qnamakerResult';
import { QnAMakerResults } from '../qnamaker-interfaces/qnamakerResults';
import { QnAMakerEndpoint } from '../qnamaker-interfaces/qnamakerEndpoint';
import { QnAMakerOptions } from '../qnamaker-interfaces/qnamakerOptions';
import { HttpRequestUtils } from './httpRequestUtils';
/**
 * Generate Answer api utils class.
 *
 * @remarks
 * This class is helper class for generate answer api, which is used to make queries to a single QnA Maker knowledge base and return the result.
 */
export declare class GenerateAnswerUtils {
    _options: QnAMakerOptions;
    private readonly endpoint;
    httpRequestUtils: HttpRequestUtils;
    /**
     * Creates new Generate answer utils.
     * @param _options Settings used to configure the instance.
     * @param endpoint The endpoint of the knowledge base to query.
     */
    constructor(_options: QnAMakerOptions, endpoint: QnAMakerEndpoint);
    /**
     * Called internally to query the QnA Maker service.
     * @param endpoint The endpoint of the knowledge base to query.
     * @param question Question which need to be queried.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    queryQnaService(endpoint: QnAMakerEndpoint, question: string, options?: QnAMakerOptions): Promise<QnAMakerResult[]>;
    /**
     * Called internally to query the QnA Maker service.
     * @param endpoint The endpoint of the knowledge base to query.
     * @param question Question which need to be queried.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    queryQnaServiceRaw(endpoint: QnAMakerEndpoint, question: string, options?: QnAMakerOptions): Promise<QnAMakerResults>;
    /**
     * Emits a trace event detailing a QnA Maker call and its results.
     *
     * @param turnContext Turn Context for the current turn of conversation with the user.
     * @param answers Answers returned by QnA Maker.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    emitTraceInfo(turnContext: TurnContext, answers: QnAMakerResult[], queryOptions?: QnAMakerOptions): Promise<any>;
    /**
     * Validate qna maker options
     *
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    validateOptions(options: QnAMakerOptions): void;
    /**
     * Sorts all QnAMakerResult from highest-to-lowest scoring.
     * Filters QnAMakerResults within threshold specified (default threshold: .001).
     *
     * @param answers Answers returned by QnA Maker.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    static sortAnswersWithinThreshold(answers: QnAMakerResult[], queryOptions: QnAMakerOptions): QnAMakerResult[];
    /**
     * @private
     */
    private formatQnaResult;
    /**
     * @private
     */
    private validateScoreThreshold;
    /**
     * @private
     */
    private validateTop;
}
//# sourceMappingURL=generateAnswerUtils.d.ts.map