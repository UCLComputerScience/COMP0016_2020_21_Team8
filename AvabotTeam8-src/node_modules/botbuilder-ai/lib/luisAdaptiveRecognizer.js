"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const luisRecognizer_1 = require("./luisRecognizer");
const luisTelemetryConstants_1 = require("./luisTelemetryConstants");
/**
 * Class that represents an adaptive LUIS recognizer.
 */
class LuisAdaptiveRecognizer extends botbuilder_dialogs_1.Recognizer {
    constructor() {
        super(...arguments);
        /**
         * The flag to indicate in personal information should be logged in telemetry.
         */
        this.logPersonalInformation = new adaptive_expressions_1.BoolExpression('=settings.telemetry.logPersonalInformation');
    }
    getConverter(property) {
        switch (property) {
            case 'applicationId':
                return new adaptive_expressions_1.StringExpressionConverter();
            case 'dynamicLists':
                return new adaptive_expressions_1.ArrayExpressionConverter();
            case 'endpoint':
                return new adaptive_expressions_1.StringExpressionConverter();
            case 'endpointKey':
                return new adaptive_expressions_1.StringExpressionConverter();
            case 'logPersonalInformation':
                return new adaptive_expressions_1.BoolExpressionConverter();
            default:
                return super.getConverter(property);
        }
    }
    /**
     * To recognize intents and entities in a users utterance.
     * @param dialogContext The [DialogContext](xref:botbuilder-dialogs.DialogContext).
     * @param activity The [Activity](xref:botbuilder-core.Activity).
     * @param telemetryProperties Optional. Additional properties to be logged to telemetry with event.
     * @param telemetryMetrics Optional. Additional metrics to be logged to telemetry with event.
     */
    recognize(dialogContext, activity, telemetryProperties, telemetryMetrics) {
        return __awaiter(this, void 0, void 0, function* () {
            // Validate passed in activity matches turn activity
            const context = dialogContext.context;
            const utteranceMatches = !activity || (context.activity.type === activity.type && context.activity.text === activity.text);
            if (!utteranceMatches) {
                throw new Error(`TurnContext is different than text`);
            }
            // Initialize application info
            const dcState = dialogContext.state;
            const application = {
                applicationId: this.applicationId.getValue(dcState),
                endpoint: this.endpoint.getValue(dcState),
                endpointKey: this.endpointKey.getValue(dcState),
            };
            // Create and call wrapper
            const wrapper = new luisRecognizer_1.LuisRecognizer(application, this.recognizerOptions(dialogContext));
            const result = yield wrapper.recognize(context);
            this.trackRecognizerResult(dialogContext, 'LuisResult', this.fillRecognizerResultTelemetryProperties(result, telemetryProperties, dialogContext), telemetryMetrics);
            return result;
        });
    }
    /**
     * Construct V3 recognizer options from the current dialog context.
     * @param dialogContext Current dialog context.
     */
    recognizerOptions(dialogContext) {
        const options = Object.assign({}, this.predictionOptions);
        if (this.telemetryClient) {
            options.telemetryClient = this.telemetryClient;
        }
        if (this.dynamicLists != null) {
            options.dynamicLists = this.dynamicLists.getValue(dialogContext.state);
        }
        return options;
    }
    /**
     * Fills the event properties for LuisResult event for telemetry.
     * These properties are logged when the recognizer is called.
     * @param recognizerResult Last activity sent from user.
     * @param telemetryProperties Additional properties to be logged to telemetry with the LuisResult event.
     * @param dialogContext Dialog context.
     * @returns A dictionary that is sent as properties to BotTelemetryClient.trackEvent method for the LuisResult event.
     */
    fillRecognizerResultTelemetryProperties(recognizerResult, telemetryProperties, dialogContext) {
        const logPersonalInfo = this.logPersonalInformation.tryGetValue(dialogContext.state);
        const applicationId = this.applicationId.tryGetValue(dialogContext.state);
        const topLuisIntent = luisRecognizer_1.LuisRecognizer.topIntent(recognizerResult);
        const intentScore = (recognizerResult.intents[topLuisIntent] && recognizerResult.intents[topLuisIntent].score) || 0;
        // Add the intent score and conversation id properties
        const properties = {};
        properties[luisTelemetryConstants_1.LuisTelemetryConstants.applicationIdProperty] = applicationId.value;
        properties[luisTelemetryConstants_1.LuisTelemetryConstants.intentProperty] = topLuisIntent;
        properties[luisTelemetryConstants_1.LuisTelemetryConstants.intentScoreProperty] = intentScore.toString();
        properties[luisTelemetryConstants_1.LuisTelemetryConstants.fromIdProperty] = dialogContext.context.activity.from.id;
        if (recognizerResult.sentiment) {
            if (recognizerResult.sentiment.label) {
                properties[luisTelemetryConstants_1.LuisTelemetryConstants.sentimentLabelProperty] = recognizerResult.sentiment.label;
            }
            if (recognizerResult.sentiment.score) {
                properties[luisTelemetryConstants_1.LuisTelemetryConstants.sentimentScoreProperty] = recognizerResult.sentiment.score.toString();
            }
        }
        // Log entity names
        if (recognizerResult.entities) {
            properties[luisTelemetryConstants_1.LuisTelemetryConstants.entitiesProperty] = JSON.stringify(recognizerResult.entities);
        }
        // Use the logPersonalInfo flag to toggle logging PII data, text is a common example
        if (logPersonalInfo.value && dialogContext.context.activity.text) {
            properties[luisTelemetryConstants_1.LuisTelemetryConstants.questionProperty] = dialogContext.context.activity.text;
        }
        // Additional Properties can override "stock" properties.
        if (telemetryProperties) {
            return Object.assign({}, properties, telemetryProperties);
        }
        return properties;
    }
}
LuisAdaptiveRecognizer.$kind = 'Microsoft.LuisRecognizer';
exports.LuisAdaptiveRecognizer = LuisAdaptiveRecognizer;
//# sourceMappingURL=luisAdaptiveRecognizer.js.map